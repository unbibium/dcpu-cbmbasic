.MACRO DO_A = SET A, %1 %n JSR %0

; stub for loading a demo from another part of RAM
:STMT_LOAD
    IF_NEXT_STMT
    	JMP LOAD_NEXT_FILE
    ; FILENAME GET
    SET I, 0
    SET X, DIRECTORY
:LOADSEARCHLOOP
    IFE A, CBM_QUOTE 
    	JSR CHRGET
    ife a, 0x2a ; ASTERISK
    	JMP LOAD_NEXT_FILE
:LOOPTHING
	IFE A, [X]
		JMP FOUND_FILE
	ADD X, 3
	IFL X, DIRECTORY_END
		JMP LOOPTHING
	SET X, 0x04 ; ?file not found
		JMP ERROR
:FOUND_FILE
	SET I, [X+1]
	SET B, [X+2]
; load from I-B to BASICMEM
:START_LOAD
	SET PUSH, I
	SET PUSH, B
	SET A, LOADINGMSG
	JSR STROUT
	SET B, POP
	SET I, POP
    SET J, BASICMEM+1
:LOADLOOP
	STI [J], [I]
	IFL I, B
	    JMP LOADLOOP
	SET [VARTAB], J
	JSR FIX_LINKS
	JMP STMT_DATA
	
:LOAD_NEXT_FILE
	SET A, FOUNDMSG
	JSR STROUT
	SET A, [FILEPOINTER]
	SET A, [A+2]
	ADD A, 1
	JSR STROUT
	SET X, [FILEPOINTER]
	SET A, X
:ADVANCE_DIR_POINTER
	ADD A, 3
	IFE [A], 0x24 ; skip $
	    ADD A, 3
	IFE A, DIRECTORY_END
		SET A, DIRECTORY
	SET [FILEPOINTER], A
	JMP FOUND_FILE


:FOUNDMSG
	DAT "FOUND ", 0
:LOADINGMSG
	DAT 13, "LOADING", 0
:FILEPOINTER
	DAT DIRECTORY

:STMT_SAVE
    RTS
:STMT_VERIFY
; Not the real verify command but allows me to see
; various memory sizes at a glance
    ; display basic text size
        DO_A STROUT, TXT_H 
        DO_A LINPRT, [TXTTAB] 
        DO_A CHROUT, 32 
        SET A, [VARTAB]
        SUB A, [TXTTAB]
        JSR LINPRT
        DO_A CHROUT, CBM_RETURN 
    ; display scalar variable size
        DO_A STROUT, VAR_H 
        DO_A LINPRT, [VARTAB] 
        DO_A CHROUT, 32 
        SET A, [ARYTAB]
        SUB A, [VARTAB]
        JSR LINPRT
        DO_A CHROUT, CBM_RETURN 
    ; display array variable size
        DO_A STROUT, ARY_H 
        DO_A LINPRT, [ARYTAB] 
        DO_A CHROUT, 32 
        SET A, [STREND]
        SUB A, [ARYTAB]
        JSR LINPRT
        DO_A CHROUT, CBM_RETURN 
    ; display free space size
        DO_A STROUT, FREE_H 
        DO_A LINPRT, [STREND] 
        DO_A CHROUT, 32 
        SET A, [FREETOP]
        SUB A, [STREND]
        JSR LINPRT
        DO_A CHROUT, CBM_RETURN 
    ; display string size
        DO_A STROUT, STR_H 
        DO_A LINPRT, [FREETOP] 
        DO_A CHROUT, 32 
        SET A, [MEMSIZ]
        SUB A, [FREETOP]
        JSR LINPRT
        DO_A CHROUT, CBM_RETURN 
        RTS

:TXT_H  DAT "TXT: ", 0
:VAR_H  DAT "VAR: ", 0
:ARY_H  DAT "ARY: ", 0
:FREE_H  DAT "FREE:", 0
:STR_H  DAT "STR: ", 0


.include "demo.dasm16"
