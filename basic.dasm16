;
;  Main BASIC interpreter
;
;  requires math.dasm16
;
;  TODO: add list of kernal dependencies.
;
;
:RAM03  
:ADRAY1 DAT BLANK
:RAM05  
:ADRAY2 DAT BLANK
:RAM07
:CHARAC DAT BLANK
:RAM08
:ENDCHR DAT BLANK
:RAM09  ; Column position of cursor before last TAB or SPC
:TRMPOS DAT BLANK
:RAM0B
:COUNT  DAT BLANK
:RAM0C
:DIMFLG DAT BLANK
; todo: standardize the value stored here.
:RAM0D
:VALTYP DAT BLANK
:RAM0E
:INTFLG DAT BLANK
:RAM0F  ; Flag for LIST, Garbage Collection, and Program Tokenization
:GARBFL DAT 0
:RAM10  ; Flag: Subscript Reference to an Array or User-Defined Function Call
:SUBFLG DAT 0
:RAM11  ; Flag: is data input to GET, READ, or INPUT?
:INPFLG DAT BLANK
.DEFINE INF_READ, 0x98
.DEFINE INF_GET, 0x40
.DEFINE INF_INPUT, 0x0
:RAM12
:TANSGN DAT BLANK
:RAM13 ; Current logical file number
:CHANNL DAT 0
:RAM14  ; Line Number for LIST/GOTO, memory address for PEEK/POKE/SYS
:LINNUM DAT 0
:RAM16  ; Pointer to the next available space in the temporary string stack
:TEMPPT DAT TEMPST
:RAM17  ; Pointer to the address of the last string in the temporary string stack
:LASTPT DAT 0
:RAM19 ; Descriptor stack for temporary strings
:TEMPST
    .FILL BLANK, 10
:TEMPSTEND
:RAM22
:INDEX  DAT BLANK, BLANK
; Pointer to the start of BASIC program text
:RAM2B  
:TXTTAB DAT BASICMEM+1

; Pointer to the variable storage area
:RAM2D
:VARTAB DAT 0
; Pointer to the start of the array storage area
:RAM2F
:ARYTAB DAT 0
; Pointer to the start of free RAM
:RAM31
:STREND DAT 0
:RAM33
:FREETOP    DAT 0
; Temporary Pointer for Strings
:RAM35
:FRESPC DAT 0
:RAM37 ; Pointer to highest address used by basic
:MEMSIZ DAT 0
;Current basic line number (>0xF00 in immediate mode)
:RAM39
:CURLIN DAT 0
:RAM3B
:OLDLIN DAT 0
:RAM3D
:OLDTXT DAT 0
:RAM3F
:DATLIN DAT 0
:RAM41
:DATPTR DAT 0
:RAM43
:INPPTR DAT 0
:RAM45  
:VARNAM DAT 0, 0
:RAM47
:VARPNT DAT 0
:RAM49
:FORPNT DAT 0
:RAM4B
:OPPTR  DAT 0
:RAM4D
:OPMASK DAT 0
.DEFINE OPM_LT, 1
.DEFINE OPM_EQ, 2
.DEFINE OPM_GT, 4
:RAM4E
:DEFPNT DAT 0
;temporary pointer to the current string descriptor
:RAM50
:DSCPNT DAT 0
:DSCLEN
:RAM53  DAT 0
:RAM55  DAT 0
; Parameters for memory copying and manipulation
:RAM58
:HIGHDS DAT 0
:RAM5F
:LOWTR  DAT 0
:RAM5A
:HIGHTR DAT 0

:FBUFPT ; Series Evaluation Pointer
:RAM71  DAT 0

.INCLUDE chrget.dasm16

; debugging routine for garbage collector
;.MACRO GARBDEBUG(F)
            ;SET C, [GARBDISPLAY] 
            ;SET [C], 0x7000
            ;ADD [C], F
            ;ADD [GARBDISPLAY], 1 
;.ENDMACRO
:GARBDISPLAY  DAT SCREENMEM+64

:USRPOK
:RAM0310    JMP 1234
.DEFINE RAM0311, USRPOK+1
.DEFINE USRADD, USRPOK+1

; ************* BASIC ROM ************


; some special tokens
.DEFINE BASIC_FOR_TOKEN, 0x81
.DEFINE BASIC_TO_TOKEN, 0xA4
.DEFINE BASIC_STEP_TOKEN, 0xA9
.DEFINE BASIC_DATA_TOKEN, 0x83
.DEFINE BASIC_GOSUB_TOKEN, 0x8D
.DEFINE BASIC_REM_TOKEN, 0x8F
.DEFINE BASIC_PRINT_TOKEN, 0x99
.DEFINE BASIC_GOTO_TOKEN, 0x89
.DEFINE BASIC_THEN_TOKEN, 0xA7
.DEFINE BASIC_TAB_TOKEN, 0xA3
.DEFINE BASIC_SPC_TOKEN, 0xA6
.DEFINE BASIC_FN_TOKEN, 0xA5
.DEFINE BASIC_NOT_TOKEN, 0xA8
.DEFINE BASIC_EQ_TOKEN, 0xB2
.DEFINE BASIC_GT_TOKEN, 0xB1
.DEFINE BASIC_LEFT_TOKEN, 0xC8
.DEFINE BASIC_SGN_TOKEN, 0xB4
.DEFINE BASIC_MINUS_TOKEN, 0xAB
.DEFINE BASIC_PLUS_TOKEN, 0xAA



; address table for commands
; (In original, address minus 1 used because
;  the 6502 added 1 to the PC after an RTS)

:TOKEN_ROUTINES
:ROMA00C
            DAT STMT_END
            DAT STMT_FOR
            DAT STMT_NEXT
            DAT STMT_DATA
            DAT STMT_INPUTN
            DAT STMT_INPUT 
            DAT STMT_DIM 
            DAT STMT_READ  
            DAT STMT_LET   
            DAT STMT_GOTO  
            DAT STMT_RUN   
            DAT STMT_IF
            DAT STMT_RESTORE
            DAT STMT_GOSUB 
            DAT STMT_RETURN
            DAT STMT_REM   
            DAT STMT_STOP  
            DAT STMT_ON
            DAT STMT_WAIT
            DAT STMT_LOAD
            DAT STMT_SAVE
            DAT STMT_VERIFY
            DAT STMT_DEF
            DAT STMT_POKE
            DAT STMT_PRINTN
            DAT STMT_PRINT
            DAT STMT_CONT
            DAT STMT_LIST
            DAT STMT_CLR
            DAT STMT_CMD
            DAT 0xE129 ; sys
            DAT 0xE1BD ; open
            DAT 0xE1C6 ; close
            DAT STMT_GET
            DAT STMT_NEW
:FUNCTION_ROUTINES 
            DAT SGNFUNC ; sgn
            DAT INT     ; int
            DAT ROMBC58 ; abs
            DAT 0x0310  ; usr
            DAT ROMB37D  ; fre
            DAT ROMB39E  ; pos
            DAT SQR
            DAT RND
            DAT LOG
            DAT EXP
            DAT COS
            DAT SIN
            DAT TAN
            DAT ATN  ; atn
            DAT PEEKFUNC  ; peek
            DAT ROMB77C  ; len
            DAT STRD
            DAT VAL
            DAT ASCN
            DAT CHRD
            DAT LEFTD
            DAT RIGHTD
            DAT MIDD

; indexing offset
.DEFINE FUNCTION_VECTOR, FUNCTION_ROUTINES-BASIC_SGN_TOKEN


; priority and address table
; for operators

:TBL_OP   
        DAT 0x79
        DAT FADDT   ; plus
        DAT 0x79
        DAT FSUBT   ; minus
        DAT 0x7B
        DAT FMULTT  ; multiply
        DAT 0x7B
        DAT FDIVT   ; divide
        DAT 0x7F
        DAT FPWRT   ; power
        DAT 0x50
        DAT ANDOP   ; AND
        DAT 0x46
        DAT OROP   ; OR
:TBL_OP_NEG
        DAT 0x7D
        DAT NEGOP   ; negative
:TBL_OP_NOT
        DAT 0x5A
        DAT NOTOP   ; NOT
:TBL_OP_COMPARE
        DAT 0x64
        DAT RELOPS   ; greater / equal / less


; table of commands
; each ended with a +0x80

:TOKEN_NAMES
:ROMA09E   
        DAT 0x45,0x4E,0xC4   ; end
        DAT 0x46,0x4F,0xD2   ; for
        DAT 0x4E,0x45,0x58,0xD4   ; next
        DAT 0x44,0x41,0x54,0xC1   ; data
        DAT 0x49,0x4E,0x50,0x55,0x54,0xA3   ; input#
        DAT 0x49,0x4E,0x50,0x55,0xD4   ; input
        DAT 0x44,0x49,0xCD   ; dim
        DAT 0x52,0x45,0x41,0xC4   ; read
        DAT 0x4C,0x45,0xD4   ; let
        DAT 0x47,0x4F,0x54,0xCF   ; goto
        DAT 0x52,0x55,0xCE   ; run
        DAT 0x49,0xC6   ; if
        DAT 0x52,0x45,0x53,0x54,0x4F,0x52,0xC5   ; restore
        DAT 0x47,0x4F,0x53,0x55,0xC2   ; gosub
        DAT 0x52,0x45,0x54,0x55,0x52,0xCE   ; return
        DAT 0x52,0x45,0xCD   ; rem
        DAT 0x53,0x54,0x4F,0xD0   ; stop
        DAT 0x4F,0xCE   ; on
        DAT 0x57,0x41,0x49,0xD4   ; wait
        DAT 0x4C,0x4F,0x41,0xC4   ; load
        DAT 0x53,0x41,0x56,0xC5   ; save
        DAT 0x56,0x45,0x52,0x49,0x46,0xD9   ; verify
        DAT 0x44,0x45,0xC6   ; def
        DAT 0x50,0x4F,0x4B,0xC5   ; poke
        DAT 0x50,0x52,0x49,0x4E,0x54,0xA3   ; print#
        DAT 0x50,0x52,0x49,0x4E,0xD4   ; print
        DAT 0x43,0x4F,0x4E,0xD4   ; cont
        DAT 0x4C,0x49,0x53,0xD4   ; list
        DAT 0x43,0x4C,0xD2   ; clr
        DAT 0x43,0x4D,0xC4   ; cmd
        DAT 0x53,0x59,0xD3   ; sys
        DAT 0x4F,0x50,0x45,0xCE   ; open
        DAT 0x43,0x4C,0x4F,0x53,0xC5   ; close
        DAT 0x47,0x45,0xD4   ; get
        DAT 0x4E,0x45,0xD7   ; new

        DAT 0x54,0x41,0x42,0xA8   ; tab(
        DAT 0x54,0xCF   ; to
        DAT 0x46,0xCE   ; fn
        DAT 0x53,0x50,0x43,0xA8   ; spc(
        DAT 0x54,0x48,0x45,0xCE   ; then
        DAT 0x4E,0x4F,0xD4   ; not
        DAT 0x53,0x54,0x45,0xD0   ; step
        DAT 0xAB   ; plus
        DAT 0xAD   ; minus
        DAT 0xAA   ; multiply
        DAT 0xAF   ; divide
        DAT 0xDE   ; power
        DAT 0x41,0x4E,0xC4   ; and
        DAT 0x4F,0xD2   ; or
        DAT 0xBE   ; greater
        DAT 0xBD   ; equal
        DAT 0xBC   ; less
        DAT 0x53,0x47,0xCE   ; sgn
        DAT 0x49,0x4E,0xD4   ; int
        DAT 0x41,0x42,0xD3   ; abs
        DAT 0x55,0x53,0xD2   ; usr
        DAT 0x46,0x52,0xC5   ; fre
        DAT 0x50,0x4F,0xD3   ; pos
        DAT 0x53,0x51,0xD2   ; sqr
        DAT 0x52,0x4E,0xC4   ; rnd
        DAT 0x4C,0x4F,0xC7   ; log
        DAT 0x45,0x58,0xD0   ; exp
        DAT 0x43,0x4F,0xD3   ; cos
        DAT 0x53,0x49,0xCE   ; sin
        DAT 0x54,0x41,0xCE   ; tan
        DAT 0x41,0x54,0xCE   ; atn
        DAT 0x50,0x45,0x45,0xCB   ; peek
        DAT 0x4C,0x45,0xCE   ; len
        DAT 0x53,0x54,0x52,0xA4   ; str$
        DAT 0x56,0x41,0xCC   ; val
        DAT 0x41,0x53,0xC3   ; asc
        DAT 0x43,0x48,0x52,0xA4   ; chr$
        DAT 0x4C,0x45,0x46,0x54,0xA4   ; left$
        DAT 0x52,0x49,0x47,0x48,0x54,0xA4   ; right$
        DAT 0x4D,0x49,0x44,0xA4   ; mid$

; other commands

        DAT 0x47,0xCF   ; go
        DAT 0x00    ; end of list


; table of errors messages
; each ended with a +0x80

:ERR01 ;TOO MANY FILES
   DAT 0x54,0x4F,0x4F
   DAT 0x20,0x4D,0x41,0x4E,0x59
   DAT 0x20,0x46,0x49,0x4C,0x45,0xD3
:ERR02 ;FILE OPEN
   DAT 0x46,0x49,0x4C,0x45
   DAT 0x20,0x4F,0x50,0x45,0xCE
:ERR03 ;FILE NOT OPEN
   DAT 0x46,0x49,0x4C,0x45
   DAT 0x20,0x4E,0x4F,0x54
   DAT 0x20,0x4F,0x50,0x45,0xCE
:ERR04 ;FILE NOT FOUND
   DAT 0x46,0x49,0x4C,0x45
   DAT 0x20,0x4E,0x4F,0x54
   DAT 0x20,0x46,0x4F,0x55,0x4E,0xC4
:ERR05 ;DEVICE NOT PRESENT
   DAT 0x44,0x45,0x56,0x49,0x43,0x45
   DAT 0x20,0x4E,0x4F,0x54
   DAT 0x20,0x50,0x52,0x45,0x53,0x45,0x4E,0xD4
:ERR06 ;NOT INPUT FILE
   DAT 0x4E,0x4F,0x54
   DAT 0x20,0x49,0x4E,0x50,0x55,0x54
   DAT 0x20,0x46,0x49,0x4C,0xC5
:ERR07 ;NOT OUTPUT FILE
   DAT 0x4E,0x4F,0x54
   DAT 0x20,0x4F,0x55,0x54,0x50,0x55,0x54
   DAT 0x20,0x46,0x49,0x4C,0xC5
:ERR08 ;MISSING FILE NAME
   DAT 0x4D,0x49,0x53,0x53,0x49,0x4E,0x47
   DAT 0x20,0x46,0x49,0x4C,0x45
   DAT 0x20,0x4E,0x41,0x4D,0xC5
:ERR09 ;ILLEGAL DEVICE NUMBER
   DAT 0x49,0x4C,0x4C,0x45,0x47,0x41,0x4C
   DAT 0x20,0x44,0x45,0x56,0x49,0x43,0x45
   DAT 0x20,0x4E,0x55,0x4D,0x42,0x45,0xD2
:ERR0A ;NEXT WITHOUT FOR
   DAT 0x4E,0x45,0x58,0x54
   DAT 0x20,0x57,0x49,0x54,0x48,0x4F,0x55,0x54
   DAT 0x20,0x46,0x4F,0xD2
:ERR0B ;SYNTAX
   DAT 0x53,0x59,0x4E,0x54,0x41,0xD8
:ERR0C ;RETURN WITHOUT GOSUB
   DAT 0x52,0x45,0x54,0x55,0x52,0x4E
   DAT 0x20,0x57,0x49,0x54,0x48,0x4F,0x55,0x54
   DAT 0x20,0x47,0x4F,0x53,0x55,0xC2
:ERR0D ;OUT OF DATA
   DAT 0x4F,0x55,0x54
   DAT 0x20,0x4F,0x46
   DAT 0x20,0x44,0x41,0x54,0xC1
:ERR0E ;ILLEGAL QUANTITY
   DAT 0x49,0x4C,0x4C,0x45,0x47,0x41,0x4C
   DAT 0x20,0x51,0x55,0x41,0x4E,0x54,0x49,0x54,0xD9
:ERR0F ;OVERFLOW
   DAT 0x4F,0x56,0x45,0x52,0x46,0x4C,0x4F,0xD7
:ERR10 ;OUT OF MEMORY
   DAT 0x4F,0x55,0x54
   DAT 0x20,0x4F,0x46
   DAT 0x20,0x4D,0x45,0x4D,0x4F,0x52,0xD9
:ERR11 ;UNDEF'D STATEMENT
   DAT 0x55,0x4E,0x44,0x45,0x46,0x27,0x44
   DAT 0x20,0x53,0x54,0x41,0x54,0x45,0x4D,0x45,0x4E,0xD4
:ERR12 ;BAD SUBSCRIPT
   DAT 0x42,0x41,0x44
   DAT 0x20,0x53,0x55,0x42,0x53,0x43,0x52,0x49,0x50,0xD4
:ERR13 ;REDIM'D ARRAY
   DAT 0x52,0x45,0x44,0x49,0x4D,0x27,0x44
   DAT 0x20,0x41,0x52,0x52,0x41,0xD9
:ERR14 ;DIVIDION BY ZERO
   DAT 0x44,0x49,0x56,0x49,0x53,0x49,0x4F,0x4E
   DAT 0x20,0x42,0x59
   DAT 0x20,0x5A,0x45,0x52,0xCF
:ERR15 ;ILLEGAL DIRECT
   DAT 0x49,0x4C,0x4C,0x45,0x47,0x41,0x4C
   DAT 0x20,0x44,0x49,0x52,0x45,0x43,0xD4
:ERR16 ;TYPE MISMATCH
   DAT 0x54,0x59,0x50,0x45
   DAT 0x20,0x4D,0x49,0x53,0x4D,0x41,0x54,0x43,0xC8
:ERR17 ;STRING TOO LONG
   DAT 0x53,0x54,0x52,0x49,0x4E,0x47
   DAT 0x20,0x54,0x4F,0x4F
   DAT 0x20,0x4C,0x4F,0x4E,0xC7
:ERR18 ;FILE DATA
   DAT 0x46,0x49,0x4C,0x45
   DAT 0x20,0x44,0x41,0x54,0xC1
:ERR19 ;FORMULA TOO COMPLEX
   DAT 0x46,0x4F,0x52,0x4D,0x55,0x4C,0x41
   DAT 0x20,0x54,0x4F,0x4F
   DAT 0x20,0x43,0x4F,0x4D,0x50,0x4C,0x45,0xD8
:ERR1A ;CAN'T CONTINUE
    DAT 0x43,0x41,0x4E,0x27,0x54
    DAT 0x20,0x43,0x4F,0x4E,0x54,0x49,0x4E,0x55,0xC5
:ERR1B ;UNDEF'D FUNCTION
    DAT 0x55,0x4E,0x44,0x45,0x46,0x27,0x44
    DAT 0x20,0x46,0x55,0x4E,0x43,0x54,0x49,0x4F,0xCE
:ERR1C  ;VERIFY
    DAT 0x56,0x45,0x52,0x49,0x46,0xD9
:ERR1D  ;LOAD
    DAT 0x4C,0x4F,0x41,0xC4

; error message address locations

:ROMA326    DAT 0  ; ???
   DAT ERR01   ; 01 too many files
   DAT ERR02   ; 02 file open
   DAT ERR03   ; 03 file not open
   DAT ERR04   ; 04 file not found
   DAT ERR05   ; 05 device not present
   DAT ERR06   ; 06 not input file
   DAT ERR07   ; 07 not output file
   DAT ERR08   ; 08 missing file name
   DAT ERR09   ; 09 illegal device number
   DAT ERR0A   ; 0A next without for
   DAT ERR0B   ; 0B syntax
   DAT ERR0C   ; 0C return without gosub
   DAT ERR0D   ; 0D out of data
   DAT ERR0E   ; 0E illegal quantity
   DAT ERR0F   ; 0F overflow
   DAT ERR10   ; 10 out of memory
   DAT ERR11   ; 11 undef'd statment
   DAT ERR12   ; 12 bad subscript
   DAT ERR13   ; 13 redim'd array
   DAT ERR14   ; 14 devision by zero
   DAT ERR15   ; 15 illegal direct
   DAT ERR16   ; 16 type mismatch
   DAT ERR17   ; 17 string too long
   DAT ERR18   ; 18 file data
   DAT ERR19   ; 19 formula too complex
   DAT ERR1A   ; 1A can't continue
   DAT ERR1B   ; 1B undef'd function
   DAT ERR1C   ; 1C verify
   DAT ERR1D   ; 1D load
   DAT ROMA381   ; 1E break

; other messages

; ok

:ROMA364   DAT CBM_RETURN, "OK", CBM_RETURN
:ROMA368   DAT 0

; error

:ROMA369   DAT "  ERROR"
:ROMA370   DAT 0

; in

:ROMA371   DAT " IN "
:ROMA375   DAT 0

; ready.

:ROMA376   DAT CBM_RETURN, "READY.", CBM_RETURN
:ROMA380   DAT 0

; break

:ROMA381   DAT CBM_RETURN,0x0A

:ROMA383   DAT "BREAK"

:ROMA388   DAT 0x00

:ROMA389   DAT 0xA0

.include "loadsave.dasm16"

:FNDFOR
; Search for "FOR" blocks on stack containing
; the current variable.  If found, returns the
; stack location as X, and Z=1.  Otherwise, Z=0
:ROMA38A    SET Z, 0
            SET X, SP
            ADD X, 2 ; make allowance for two JSRs 
:ROMA38F    IFN [X], BASIC_FOR_TOKEN ; FOR block
                RTS ; not a FOR block.
:ROMA39A    IFE [FORPNT], 0
            	SET [FORPNT], [X+1]
:ROMA3A4    SET A, [X+1]
            IFE [FORPNT], A
                JMP ROMA3B7
:ROMA3B0    ADD X, 11
            JMP ROMA38F
:ROMA3B7    SET Z, 1 ; "found" result
            RTS

:BLTU
; ----------------------------------------------------------------------------
; MOVE BLOCK OF MEMORY UP
;
; ON ENTRY:
;   (Y,A) = (HIGHDS) = DESTINATION END+1     (58)
;   (LOWTR) = LOWEST ADDRESS OF SOURCE       (5F)
;   (HIGHTR) = HIGHEST SOURCE ADDRESS+1      (5A)
; ----------------------------------------------------------------------------
; Parameters in [LOWTR], [HIGHTR], and [HIGHDS]
;               and A should contain the value of [HIGHDS].
; RETURN: ?
:ROMA3B8        JSR REASON      ; garbage collect?
                SET [STREND], A ; returned start of free RAM
:BLTU2
:ROMA3BF        SET B, [LOWTR] ; source start address
                SET J, [HIGHTR] ; source end address
                IFE J, B    ; move no bytes
                    RTS
                ; pre-decrement
                STD I, [HIGHDS] ; destimation end address
:ROMA3BG        STD [I], [J]
                IFN J, B
                    JMP ROMA3BG
                SET [I], [J] ; last byte
                RTS

; test for A bytes free on stack
:GETSTK
    ADD A, STACK+52
    IFG A, SP
        JMP OMERR
    RTS

; ----------------------------------------------------------------------------
; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
; (A) = ADDR ARRAYS NEED TO GROW TO
; ----------------------------------------------------------------------------
:REASON
:ROMA408    IFL A, [FREETOP]
                RTS
            SET PUSH, A
            JSR GARBAG
            SET A, POP
            ; garbage collection not enough?
            IFG A, [FREETOP]
                JMP OMERR
:ROMA434    RTS

; out of memory error
:OMERR
:ROMA435     SET X, 16  ; ?OUT OF MEMORY

; handle error messages
:ERROR
:ROMA437     JMP [IERROR]   ; snall detour in the kernal
:BASIC_ERROR
:ROMA43A     SET [INDEX], [ROMA326+X]
             JSR CLRCHN
             SET [CHANNL], 0
:ROMA44E     JSR ROMAAD7 ; end line on CMD
:ROMA451     JSR OUTQUES
             SET Z, [INDEX]   ; LDY #$00
:ROMA456     SET A, [Z]       ; LDA ($22),Y
             SET PUSH, A      ; PHA
            
            AND A, 0x7F      ; AND #$7F
            SET PUSH, Z
             JSR ROMAB47   ; CHROUT
            SET Z, POP
             ADD Z, 1            ; INY
            SET A, POP 
            IFC A, 0x80       ; PLA
                JMP ROMA456  ; BPL $A456
             JSR ROMA67A ; clear some basic variables
             SET A, ROMA369  ; "  ERROR"
:ROMA469     JSR STROUT
             IFL [CURLIN], 0xFF00  ;If not in immediate node
                 JSR ROMBDC2      ; display "IN <line>"

:READY
:ROMA474     SET A, ROMA376   ; "READY."
             JSR STROUT
             SET A, 0x80
:ROMA47D     JSR SETMSG
; main loop
:MAIN
:ROMA480    JMP [IMAIN] ; normally ROMA483
:DEF_MAIN
:ROMA483    
            ; debugging is useful
            IFE DEBUGPROGMEM, 0
                JMP SKIPBMEM
            SET I, SCREENMEM
            SET J, BASICMEM
:BMEMLOOP
            STI [I], [J]
            BOR [I-1], 0x0100
            IFL I, SCREENMEM+32
                JMP BMEMLOOP
:SKIPBMEM
            JSR INLIN ; address of line input in X
            SET [RAM7A], X
:ROMA48A    JSR CHRGET 
:ROMA48D    SET X, A ; TAX
:ROMA48E    IFE A, 0  ; BEQ $A480 
                JMP [IMAIN]   ; which was this JMP
            SET [CURLIN], -1 ; enter immediate mode
            IFE C, 0 ; begins with a digit
               JMP MAIN1 ; add line to program
            ; parse statement in immediate mode
            JSR CRUNCH ; token cruncher
            JMP ROMA7E1 ; execute a statement

; handle insert/delete basic lines
:MAIN1
:NUMBERED_LINE
:ROMA49C    JSR LINGET   ; get decimal number into [LINNUM]
            JSR CRUNCH   ; token cruncher
            ; why is this too short?
            SET [COUNT], Y  ; cache length of line
            JSR FINDLN  ; search for line A
            IFE C, 0 ; line number not found
                JMP ROMA4ED  ; insert only
; Delete old line.
:ROMA4A9    SET I, [LOWTR] ; Pointer to matched line
            SET J, [I]     ; Pointer to following line
            STD B, [VARTAB] ; End of program text
            SUB B, J
            ADD B, I       ; End when line is removed.
            SET [VARTAB], B ; reclaim memory for variables
            ; due to the fact that zero is always a 16-bit zero,
            ; and never the high byte of a small number, 
            ; we might be able to relink the program within the
            ; loop instead of the old way.
:ROMA4A9L
            STI [I], [J]
            IFL I, B
                JMP ROMA4A9L
            SET [I], [J]
; insert new line.
:ROMA4ED    JSR SETPTRS ; clear variable memory
            JSR FIX_LINKS ; relink basic program
            IFE [RAM0200], 0   ; No text entered
                JMP MAIN ; delete only; return to prompt
            ; Make room for new line by moving the rest
            ; of the program up
:ROMA4F8    SET A, [VARTAB]
            SET [HIGHTR], A  ; source end address + 1
            ADD A, [COUNT]  ; add number of characters
            SET [HIGHDS], A  ; destination end address + 1
            JSR BLTU        ; Move memory
            SET [RAM01FF], [LINNUM]
:ROMA517    SET [VARTAB], [STREND]
            SET Y, [COUNT]
            SUB Y, 1
            ; copy line into memory
            SET I, [LOWTR] ; pointer to new spot in memory
            ADD I, Y
            STI J, RAM01FE
            ADD J, Y
:ROMA522L
            STD [I], [J]
            IFN J, RAM01FE
                JMP ROMA522L
:ROMA52A    JSR SETPTRS ; clr?
            JSR FIX_LINKS
            JMP [IMAIN]

; ----------------------------------------------------------------------------
; CLEAR ALL VARIABLES
; RE-ESTABLISH ALL FORWARD LINKS
; ----------------------------------------------------------------------------
:FIX_LINKS
:ROMA533    
            SET I, [TXTTAB]
            SET J, I   ; note beginning of line
:ROMA53C    IFE [I+1], 0 ; no link; must be end of program
                RTS
            ADD I, 1   ; skip over line number
:ROMA544    ADD I, 1   ; go to next character
            IFN [I], 0
                JMP ROMA544
            ADD I, 1
:ROMA54A    SET [J], I  ; link from beginning of line to current location
:ROMA559    SET J, I    ; use current location for next link
:ROMA55D    JMP ROMA53C 

; Get a line from the console.
; input stored in RAM0200, zero-terminated
:INLIN
:ROMA560    SET X, 0
:ROMA562    JSR ROME112   ; GETIN -> ROMF157
            IFE A, CBM_RETURN 
                JMP ROMAACA ; mark end and return
            SET [RAM0200+X], A
            ADD X, 1
            IFU X, HW_COLS*ROWS_IN_LINE
                JMP ROMA562
            IFE DEBUG_SNERR, 0
                JMP LTLERR
            ; to help diagnose screen editor issues.
            ; how long did it think the line was?
            SET A, X
            JSR LINPRT
            ;SET A, 62
            ;JSR CHROUT
            ;SET A, HW_COLS*ROWS_IN_LINE
            ;JSR LINPRT
            SET A, CBM_RETURN
            JSR CHROUT
            SET A, CBM_RETURN
            JSR CHROUT

:LTLERR
            SET X, 0x17 ; ?LINE TOO LONG
            JMP ERROR
            
; Standard Token Cruncher
; Throughout this routine, X contains the address
; of the characters being evaluated.
; RAM0F is used to disable tokenization after a DATA statement.
; Y returns the length of the string plus 2, not including line number 
; 2 is added so that when the crunched string is copied into program
; memory, it is copied along with an extra word for the line number,
; and an extra word into which the link to the next line will be stored.
; That is why everything indexed from [RAM01FE] instead of [RAM0200]
; directly, and why everything in the 6502 version indexed from $01FC.
:CRUNCH
:ROMA579    JMP [ICRNCH]
:DEF_CRUNCH
:ROMA57C    SET X, [RAM7A] 
            SET Y, 2    ; first two characters are taken up by link &c
            SET [RAM0F], Y
:ROMA582    SET A, [X]
            IFC A, 0x80  ; BPL, unshifted character.
                JMP ROMA58E
            IFE A, 0xFF ; pi
                JMP ROMA5C9
            ADD X, 1
            JMP ROMA582 ; ignore, go to next
:ROMA58E    IFE A, CBM_SPACE
                JMP ROMA5C9
            SET [ENDCHR], A
            IFE A, CBM_QUOTE
                JMP ROMA5EE ; skip to next quote
            IFB [RAM0F], 0x40 ; BVS
                JMP ROMA5C9 ; Quote mode for DATA statement
            IFN A, 0x3F ; question mark
                JMP ROMA5A4
            SET A, BASIC_PRINT_TOKEN 
            JMP ROMA5C9
            ; the REM test line should get at least this far
:ROMA5A4    IFL A, 0x30 ; Zero
                JMP ROMA5AC ; not a digit
:ROMA5A8    IFL A, 0x3C ; Digit
                JMP ROMA5C9
:ROMA5AC    SET [RAM71], Y  ; cache position in thing
            SET [COUNT], 0  ; start at first token
            SET Y, -1       ; start at first byte of token table
            SET [RAM7A], X
            SUB X, 1
; Loop through input buffer and token, see if they match.
:ROMA5B6    ADD Y, 1 ; does next character of token table...
            ADD X, 1 ; match the next byte of the input?
; loop section 1
:ROMA5B8    SET A, [X]
:ROMA5BC    XOR A, [TOKEN_NAMES+Y]
            IFE A, 0
                JMP ROMA5B6
:ROMA5C1    ; 0x80 matches both the final character of
            ; a full command, or the shifted final character
            ; of an abbreviated command.
            IFN A, 0x80
                JMP ROMA5F5            
            BOR A, [COUNT]  ;A = Token = 0x80 + token's position in list
:ROMA5C7    SET Y, [RAM71]
:ROMA5C9    ADD X, 1 ; Move to next character in buffer
            ADD Y, 1 ; Move to...?
            SET [RAM01FD+Y], A
            IFE A, 0  ; end of line
                JMP ROMA609
:ROMA5D4    SUB A, CBM_COLON
            IFE A, 0
                JMP ROMA5DC
            IFN A, BASIC_DATA_TOKEN-CBM_COLON ; DATA token
                JMP ROMA5DE
:ROMA5DC    SET [RAM0F], A ; Set quote mode ON for DATA
:ROMA5DE    IFN A, BASIC_REM_TOKEN-CBM_COLON
                JMP ROMA582 ; just move to next character
            SET [ENDCHR], 0 
            ; Copy characters literally until either
            ; end of line, or whatever's in [ENDCHR].
:ROMA5E5    SET A, [X]
            IFC A, 0xFF
                JMP ROMA5C9
:ROMA5EA    IFE A, [ENDCHR]
                JMP ROMA5C9
:ROMA5EE    ADD Y, 1
            SET [RAM01FD+Y], A
            ADD X, 1
            IFB X, 0xFF ; BNE in 8-bit
                JMP ROMA5E5
            ; Jumped here from string matcher above,
            ; when a token didn't match.  Return to beginning
            ; of token, and try the next one.
:ROMA5F5    SET X, [RAM7A]  ; Restore original source pointer
            ADD [COUNT], 1
            ; Skip past end of this token
:ROMA5F9    ADD Y, 1
            IFC [TOKEN_NAMES-1+Y], 0x80
                JMP ROMA5F9
            IFN [TOKEN_NAMES+Y], 0
                JMP ROMA5B8 ; Try next token
:ROMA604    SET A, [X]
            IFC A, 0x80 ; unshifted
                JMP ROMA5C7
            ; branches here if null character found
:ROMA609    SET [RAM01FE+Y], A  ; ends with two NULLs in a row
            SET [RAM7A], RAM0200-1
            RTS

; SEARCH for a line in a program
; pass address of first line to check in A (originally A+X)
; returns C=1 and address in LOWTR if found
; returns C=0 if not found

:FINDLN
:ROMA613    SET A, [TXTTAB]     ; $2B
:FINDLNA
:ROMA617    SET I, 1
            SET [LOWTR], A
            ADD I, [LOWTR]  ; I = NEXT line in linked list
            IFE [I], 0 ; if address of that line is 0
                JMP ROMA640
            SET A, [LINNUM]
            IFL A, [I]
                JMP ROMA640 ; return "not found"
            SET C, 1    ;since last one was a BCC
            IFE A, [I]
                RTS    ; return "found"
:ROMA637    SET A, [I-1]
            JMP FINDLNA  ; Check line after next. 
:ROMA640    SET C, 0 ; return "not found"
            RTS
            
; NEW command

:STMT_NEW
:ROMA642    IF_NOT_NEXT_STMT
                RTS
:SCRTCH
:ROMA644    SET I, [TXTTAB]
            STI [I], 0
            STI [I], 0
            SET [I], 0
            SET [VARTAB], I
:SETPTRS
:ROMA659    JSR STXTPT ; set execution pointer to [TXTTAB]-1

:ROMA65C    SET A, 0     ;LDA #$00
            SET Z, 1
; CLR command

:STMT_CLR
:ROMA65E    IF_NOT_NEXT_STMT
                RTS   ; BNE $A68D            
:ROMA660    JSR CLALL
:ROMA663    SET [FREETOP], [MEMSIZ]
            ;SET EX, 0xA663
            ;IFE [VARTAB], 0
            ;   JMP VARTABCRASH
            SET [ARYTAB], [VARTAB]
            SET [STREND], [VARTAB]  ; set start of free RAM
:ROMA677    JSR STMT_RESTORE

; reset stack and program pointers

:ROMA67A    SET [TEMPPT], TEMPST  ;String pointer stack
            SET A, POP ; Pull RTS location
            SET SP, STACKBASEND  ; LDX #$FA
            SET PUSH, A
            SET [OLDTXT], 0
            SET [SUBFLG], 0
:ROMA68D    RTS

; ----------------------------------------------------------------------------
; SET TXTPTR TO BEGINNING OF PROGRAM
; ----------------------------------------------------------------------------
:STXTPT
:ROMA68E    SET A, [TXTTAB]
            SUB A, 1
            SET [RAM7A], A
            RTS

:STMT_LIST
:ROMA69C    IF_IS_DIGIT     ; LIST line
                JMP ROMA6A4
            IF_NEXT_STMT    ; LIST all
                JMP ROMA6A4
            IFN A, BASIC_MINUS_TOKEN ; LIST -end
                RTS
:ROMA6A4    JSR LINGET
            JSR FINDLN ; 
            JSR CHRGOT
            IF_NEXT_STMT  ; no end line specified
                JMP ROMA6BB
            IFN A, BASIC_MINUS_TOKEN  ; range to end
                RTS
            JSR CHRGET
            JSR LINGET
            IFE Z, 0  
                RTS
                ; pop?
:ROMA6BB    SET A, POP
            SET A, POP
            IFN [LINNUM], 0
                JMP ROMA6C9
            SET [LINNUM], -1
; LIST LINES from LOWTR to LINNUM
:ROMA6C9    SET [RAM0F], 1
            SET Y, [LOWTR]
:ROMA6CD    IFE [Y], 0     ; no link to next line
                JMP ROMA714
            JSR ROMA82C ; check STOP key
            JSR ROMAAD7 ; end line on output file
            ADD Y, 1
            IFG [Y], [LINNUM]  ; beyond end line
                JMP ROMA714 ; break out of loop
            SET [FORPNT], Y
:ROMA6EA    SET A, [Y]
            JSR LINPRT
            SET A, CBM_SPACE ; space following line number
:ROMA6EF    SET Y, [FORPNT]
:ROMA6F1    AND A, 0x7F ; filter high bit if coming from QPLOP
            ; loop to print a line
:ROMA6F3    JSR ROMAB47 ; print character
            IFE A, CBM_QUOTE
            XOR [RAM0F], -1 ; enter quote mode
            ADD Y, 1
            ;IFE Y, 0  ; what, stop after 256 characters?
            ;   JMP ROMA714
            SET A, [Y]
            IFN A, 0
                JMP QPLOP ; Print with tokens expanded
            SET Y, [LOWTR] ; follow link to nxt line
            SET [LOWTR], [Y] ; cache link to line after that
            IFN [Y], 0
                JMP ROMA6C9
:ROMA714    JMP ROME386 

; Standard Token Printer
:QPLOP
:ROMA717    JMP [IQPLOP]
:DEF_QPLOP
:ROMA71A    IFL A, 0x80 ; Low ASCII
                JMP ROMA6F3   ; print literal
            IFE A, 0xFF ; PI
                JMP ROMA6F3   ; print literal
            IFB [RAM0F], 0x8000 ; BMI
                JMP ROMA6F3   ; print literal
            ; token value detected
:ROMA724    SUB A, 0x7F
            SET [FORPNT], Y
            SET Y, TOKEN_NAMES-1
:ROMA72C    SUB A, 1 ; Next token
            IFE A, 0
                JMP ROMA737
:ROMA72F    ADD Y, 1 ; Next character in token
            IFC [Y], 0x80
                JMP ROMA72F ; Next character
            JMP ROMA72C    ; next token
            ; print keyword
:ROMA737    ADD Y, 1
            SET A, [Y]
            IFB A, 0x80 ; end of token
                JMP ROMA6EF  ; print last character and return to loop
            JSR ROMAB47 ; print character in token
            JMP ROMA737

; FOR statement
; calls STMT_LET and pushes 11 words onto the stack:
;    pointer to first statement in loop      @ 10
;    line number of same                     @ 9
;    TO target as 3-word float               @ 6-8   
;    STEP increment as 4-word float          @ 2-5   
;    pointer to variable being incremented   @ 1   
;    FOR token                               @ 0 - shallow  

:STMT_FOR
:ROMA742    SET [SUBFLG], 0x80
            JSR STMT_LET
            JSR FNDFOR  ; check whether we're resuming a FOR loop
            IFE Z, 0 ;
                JMP ROMA753
            ; we're already looping on this variable
            ADD X, 10  ; is this right?
            SET SP, X  ; purge that loop from the stack 
:ROMA753    SET A, POP ; discard JSR
            SET A, 11   ; test for this many bytes available
            JSR GETSTK
            JSR DATAN ; get end of statement
            SET PUSH, I        ; push first statement in loop ; +1
            SET PUSH, [CURLIN] ; push line number             ; +1
            SET A, BASIC_TO_TOKEN   ; TO token
            JSR SYNCHR
            JSR CHKNUM  ; left side of TO must be numeric
            JSR FRMNUM   ; get number on right side of TO
            ; Compress FACSGN into FACHO;
            ; pushing only 3 words.
            SET A, [FACSGN]
            BOR A, 0x7FFF
            AND A, [FACHO]
            SET [FACHO], A
            SET I, ROMA78B  ; return vector
            JMP ROMAE43 ; push TO target value    +3
            ; it returns here
:ROMA78B    SET A, FONE ; STEP 1 by default
            JSR MOVFM
            JSR CHRGOT
            IFN A, BASIC_STEP_TOKEN  ; STEP token?
                JMP ROMA79F
            JSR CHRGET
            JSR FRMNUM ; get STEP value
:ROMA79F    JSR SIGN
            JSR ROMAE38  ; push STEP with separate sign byte +4
            SET PUSH, [FORPNT] ; pointer to increment variable +1
            SET PUSH, BASIC_FOR_TOKEN

; execute next statement

:NEWSTT
:ROMA7AE    JSR ROMA82C ; check STOP key
:ROMA7B1    ; Skip OLDTXT setting if executed line is in
            ; the RAM0200 range, i.e. in immediate mode
            SET A, [RAM7A]
            IFL A, RAM0200
                JMP ROMA7BA
            IFG A, RAM0200+BASIC_BUFFER_LENGTH-1
                JMP ROMA7BA
            JMP ROMA7BE
            ; set CONT return position
:ROMA7BA    SET [OLDTXT], [RAM7A]
; instead of using Y to index, we store the whole
; address in Z.
:ROMA7BE    SET Z, [RAM7A]
:ROMA7C0    SET A, [Z]
:ROMA7C2    IFN A, 0 ; NOT end of line
              JMP ROMA807 ; consume required colon and continue
:ROMA7C4    SET A, [Z+1] ; check link to next line
:ROMA7C8    SET C, 0  ; hide "BREAK" message
:ROMA7C9    IFE A, 0  ; no line following this one
                JMP ROMA84B   ; end program

            ADD Z, 2  ; get new current line number
            SET [CURLIN], [Z]
            SET [RAM7A], Z
:ROMA7E1    JMP [RAM0308]   ; normally A7E4

:GONE    ; execute a statement
:ROMA7E4    JSR CHRGET    ; get token into A
            JSR ROMA7ED   ; execute command in token
            JMP NEWSTT    ; move to next statement

; execute command  at RAM7A.
; its first character or token is in A
:ROMA7ED    IF_NEXT_STMT  ; If zero bit set
                RTS
:ROMA7EF    SUB A, 0x80
            IFU A, 0   
                JMP STMT_LET ; simple variable assignment
:ROMA7F3    IFG A, 0x22 ; number of commands
                JMP ROMA80E
            SET PUSH, [TOKEN_ROUTINES+A] ; get address of next command
            JMP CHRGET
            ; will return to STMT_* with next character in A, C, Z.
:ROMA807    IFE A, CBM_COLON
                JMP ROMA7E1
            JMP SNERR
            ; handle "GO TO" with a space in it
:ROMA80E    IFN A, 0x4B ; GO code
                JMP SNERR
            JSR CHRGET
            SET A, BASIC_TO_TOKEN   ; TO code
            JSR SYNCHR
            JMP STMT_GOTO

; end line on CMD output file

:STMT_RESTORE
:ROMA81D    SET A, [TXTTAB]        
            SUB A, 1      
:ROMA827    SET [DATPTR], A 
            RTS
; test STOP key for break in program
:ROMA82C     JSR STOP
; will set carry bit if pressed

; STOP command
; is basically END with the carry bit set,
; so that the BREAK message appears.
:STMT_STOP
:ROMA82F    IFN C, 0      ; BCS $A832
                JMP ROMA832

; END command
:STMT_END
            SET C, 0      ; CLC
:ROMA832    IF_NOT_NEXT_STMT     ; Not end of statement
                RTS
:ROMA834    SET A, [RAM7A]      
:ROMA838    IFG [CURLIN], 0xFF00 ; in immediate mode
                JMP ROMA849  
            SET [OLDTXT],[RAM7A]  ; set return point
            SET [OLDLIN],[CURLIN] ; for CONT
:ROMA849    SET A, POP      ; don't return to NEWSTT
:ROMA84B    SET A, ROMA381 ; "BREAK"
            IFE C, 0 ; not really a break
                JMP ROME386
            JMP ROMA469  ; go to READY prompt

:STMT_CONT
:ROMA857    IFE Z, 1
                RTS
            SET X, 0x1A ; ?CAN'T CONTINUE ERROR
            IFL [OLDTXT], 0x100
                SET PC, ERROR 
            SET [RAM7A],[OLDTXT]
            SET [CURLIN],[OLDLIN]   
            RTS

; RUN command

:STMT_RUN
:ROMA871    SET PUSH, Z
            SET A, 0 
            JSR SETMSG
            SET Z, POP
            IF_NEXT_STMT ; Not zero
                JMP SETPTRS ; clear variable memory

:ROMA87D    JSR ROMA660      ; do CLR
            JMP ROMA897      ; do GOTO

; GOSUB command

:STMT_GOSUB
:ROMA883    SET A, 3
            JSR GETSTK    ; check for room in the stack
            ; originally pushed 5 bytes to stack,
            ; now pushes 3 words
            SET PUSH, [RAM7A]
            SET PUSH, [CURLIN]
            SET PUSH, BASIC_GOSUB_TOKEN  ; to signify a GOSUB

:ROMA897    JSR CHRGOT

            JSR STMT_GOTO
            JMP NEWSTT  ; execute next statement

; GOTO command

:STMT_GOTO
:ROMA8A0    JSR LINGET  ; get target line
            JSR REMN  ; Set I to the 0 at the end of this line
            SET A, I ; start at next line
            ADD A, 1 ; skip over null 
            IFG [CURLIN], [LINNUM]
                SET A, [TXTTAB] ; start at beginning
            IFE [CURLIN], [LINNUM]
                SET A, [TXTTAB] ; start at beginning
            JSR FINDLNA ; set [LOWTR] to address of target
            IFE C, 0        ; line not found
                JMP ROMA8E3 ; throw ?UNDEF'D STATEMENT
:ROMA8C5    SET A, [LOWTR]
            SUB A, 1
:ROMA8C9    SET [RAM7A], A  ; got new location
            RTS

; RETURN command
:STMT_RETURN
:ROMA8D2    IF_NOT_NEXT_STMT
                RTS
            BOR [FORPNT], 0xFF00 ; in case GOSUB from immediate
            JSR FNDFOR   ; Search for FOR blocks on stack
            SET SP, X
            IFE PEEK, BASIC_GOSUB_TOKEN ; CMP #$8D   ; GOSUB
                JMP ROMA8EB
            SET X, 0x0C  ; ?RETURN WITHOUT GOSUB
            IFN X, 0x0C  ; skip next
:ROMA8E3    SET X, 0x11 ; ?undef'd statment
                JMP ERROR

; Remove GOSUB block from stack
:ROMA8EB    SET A, POP ; consume GOSUB token
            SET [CURLIN], POP
            SET [RAM7A], POP

:STMT_DATA
:ROMA8F8    JSR DATAN ; get end of statement
            ; instead of returning number to add in Y,
            ; returns complete address in I.
:ROMA8FB        SET [RAM7A], I
            RTS

; GET END OF LINE
; returns address of next line in I, ready for RAM7A.
; (original returned number to add in Y)
; There's a way to use registers instead of ENDCHR and CHARAC,
; but when I try, program entry breaks somehow.
:DATAN
:ROMA906    SET [CHARAC], CBM_COLON   ; get next statement
            IFE 1, 0 ; skip
:REMN
:ROMA909    SET [CHARAC], 0           ; get end of line
:ROMA90D    SET I, [RAM7A]
            SET [ENDCHR], 0
            SET Z, 0
:ROMA911    SET A, [ENDCHR]    ; swap CHARAC and ENDCHR
            SET [ENDCHR], [CHARAC]
            SET [CHARAC], A
:ROMA919    SET A, [I] 
            IFE A, 0
                SET Z, 1
            IFE A, 0
                RTS
:ROMA91D    IFE A, [ENDCHR]
                RTS
            ADD I, 1
            IFE A, CBM_QUOTE ; quote mark
                JMP ROMA911
            JMP ROMA919

:STMT_IF
:ROMA928    JSR FRMEVAL
            JSR CHRGOT
            IFE A, BASIC_GOTO_TOKEN
                JMP ROMA937
            SET A, BASIC_THEN_TOKEN
            JSR SYNCHR
:ROMA937    SET C, 0
            SET A, [FACEXP] ; get result of FRMEVAL
            IFN A, 0        ; result is TRUE
                JMP STMT_THEN

:STMT_REM
:ROMA93B    JSR REMN ; get end of line
            JMP ROMA8FB ; was BEQ

:STMT_THEN
:ROMA940    JSR CHRGOT
            IF_NOT_DIGIT    ; THEN <command>
                JMP ROMA7ED ; execute command
            JMP STMT_GOTO ; THEN <line number>

:STMT_ON
:ROMA94B    JSR GETBYT  ; Get result of expression after ON
            SET PUSH, A  ; cache token following the expression
            IFE A, BASIC_GOSUB_TOKEN
                JMP ROMA957
:ROMA953    IFN A, BASIC_GOTO_TOKEN
                JMP SNERR
            ; original used $65 -- low byte of a 16-bit, right?
:ROMA957    SUB [RAM64], 1
            IFN [RAM64], 0
                JMP ROMA95F ; skip
            SET A, POP  ; pop GOTO/GOSUB token
            JMP ROMA7EF ; evaluate as if a stand-alone command
:ROMA95F    JSR CHRGET  
            JSR LINGET  ; consume and discard line number
            IFE A, CBM_COMMA
            JMP ROMA957
            SET A, POP ; past end of list; do nothing.
            RTS         

; get decimal literal, i.e. a line number, into LINNUM.
; C should be zero coming in, and
; A should be the result of a CHRGET.
; throws an illegal quantity error if over 63999.

:LINGET
:ROMA96B    SET X, 0
            SET [LINNUM], 0
:ROMA971    IF_NOT_DIGIT
                RTS
            SUB A, 0x30   ; get value of ASCII digit
            IFG [LINNUM], 6399 ; about to be >64000
                JMP SNERR
            MUL [LINNUM], 10
            ADD [LINNUM], A
            JSR CHRGET
            JMP ROMA971 ; get next digit or return


; LET command
:STMT_LET
:ROMA9A5    JSR PTRGET ; get variable from name as I
            ; should return an address, and 
            ; leave the cursor before the = sign following
            SET [FORPNT], I ; assignments use FORPNT instead of VARPNT
            SET A, BASIC_EQ_TOKEN
            JSR SYNCHR
            SET PUSH, [INTFLG]
            SET PUSH, [VALTYP]
            JSR FRMEVAL
            SET A, POP ; VALTYP of variable...
            SHL A, 1
            SET C, EX
            JSR CHKVAL  ; check that it's the correct type
            ; Z flag was result of BIT $0D
            AND A, [VALTYP]
            IFN A, 0
                JMP ROMA9D9  ; assign to string
:ROMA9C1    SET A, POP  ; INTFLG of variable
:ROMA9C2    IFC A, 0x80 ; BPL
                JMP ROMBBD0  ; assign to float

; assign to integer
:ROMA9C4    JSR ROUND
            JSR AYINT ; convert float to int
            SET A, [FORPNT]
            SET [A], [FACHO+1]  ; store int result
            RTS


;assign to string
:ROMA9D9    SET A, POP ; discard INTFLG from STMT_LET
:ROMA9DA    IFN [FORPNT], C_ZERO ; TI$? ($BF on C64, $D0 or $DE on others)
                JMP ROMAA2C
            ;assign to TI$
            JSR ROMB6A6
            IFN A, 6       ; length must be 6
                JMP FCERR  ; otherwise illegal quantity error
            SET Y, 0
            SET [RAM61], 0
            SET [RAM66], 0
:ROMA9ED    SET [RAM71], Y
            JSR ROMAA1D
            JSR MUL10
            ADD [RAM71], 1
            SET Y, [RAM71]
            JSR ROMAA1D
            JSR COPY_FAC_TO_ARG_ROUNDED
            SET X, A
            IFE A, 0
                JMP ROMAA07
            ADD X, 1
            SET A, X
            JSR ROMBAED
:ROMAA07    SET Y, [RAM71]
            ADD Y, 1
            IFN Y, 6
                JMP ROMA9ED
            JSR MUL10
            JSR ROMBC9B
            ; this is definitely wrong, but it
            ; should be simple to fix later
            SET X, [RAM64]
            ;SET Y, [RAM62] ; 63
            ;SET A, [RAM64]
            JMP SETTIM

; assign to variable string
:ROMAA2C    ;DAT 0x5000
            SET Y, [RAM64]
            SET A, [Y]
            SET B, [Y+1]
            ;SET C, [FREETOP]
            ;DAT 0x2000
            IFL [Y+1], [FREETOP]; beginning of string variable area
                JMP ROMAA4B ; points to a string already in memory
            IFL Y, [VARTAB] 
                JMP ROMAA4B ; points to a literal in BASIC
            JMP ROMAA52     ; 
:ROMAA4B    SET A, [RAM64] ; take pointer
            JMP ROMAA68    ; move descriptor into variable
:ROMAA52    SET A, [Y]
            JSR STRINI
            SET [RAM6F], [DSCPNT]  ;TODO: check order
            JSR MOVINS  ; move string
            SET A, FACEXP
; move 2-byte descriptor into variable
:ROMAA68    SET [DSCPNT], A
            JSR FRETMS ; herp derp stack
            SET J, [DSCPNT]
            SET I, [FORPNT]
            STI [I], [J]      ; length
            STD [I], [J]  ; address
            RTS

; add next digit to float accum

:ROMAA1D    SET A, [INDEX]
            ADD A, Y
            SET A, [A]  ; LDA ($22),Y
            JSR RAM0080 ; verify is digit
            IFN C, 0 ; not a digit
                JMP FCERR
            SUB A, 0x30
:ROMAA29    JMP FINLOG

:STMT_PRINTN
:ROMAA80    JSR ROMAA86
            JMP ROMABB5

:STMT_CMD
:ROMAA86    JSR GETBYT
            IFE Z, 1  ; i think it ends in CHRGOT
                JMP ROMAA90
            SET A, CBM_COLON
            JSR SYNCHR
:ROMAA90    SET PUSH, Z
            SET X, [CHANNL]
            JSR ROME118
            SET Z, POP 
            JMP STMT_PRINT

; Print string and get next thing.
:ROMAA9A    JSR ROMAB21
:ROMAA9D    JSR CHRGOT
:STMT_PRINT
:ROMAAA0    IF_NEXT_STMT  ; print by itself, or non-semicolon-terminated
                JMP ROMAAD7 ; print CR
:ROMAAA2    IF_NEXT_STMT
                RTS
:ROMAAA4    IFE A, BASIC_TAB_TOKEN   ; TAB(
                JMP ROMAAF8
            SET C, 0
            IFE A, BASIC_SPC_TOKEN   ; SPC(
                JMP ROMAAF8
            IFE A, CBM_COMMA
                JMP ROMAAE8
            IFE A, 0x3B ; SEMICOLON
                JMP ROMAB13
            JSR FRMEVAL
            IFU [VALTYP], 0    ; string
                JMP ROMAA9A    ; print string and restart
            JSR FOUT    ; convert float to string
            JSR STRLIT  ; prepare string in memory
            JSR ROMAB21 ; print string in [INDEX]
            JSR OUTSP ; print space ?
            JMP ROMAA9D  ; was a BNE, probably unconditional
            
; zero-terminate this string
:ROMAACA    SET [RAM0200+X], 0
            ; return location of input buffer in X
            SET X, RAM0200-1
            SET Z, 0
            IFN [CHANNL], 0
                RTS
            SET Z, 1

; RETURN at end of line on PRINT
:ROMAAD7 
            SET A, CBM_RETURN  
            JSR ROMAB47
            IFC [CHANNL], 0x80
                JMP ROMAAE5
            SET A, 0x0A  ; newline
            JSR ROMAB47
:ROMAAE5    XOR A, 0xFF 
            SET Z, 0
            SET C, 0  ; clear BREAK flag
            RTS

; routine for printing TAB( and SPC(
:STMT_TAB
:ROMAAE8    SET C, 1
            JSR PLOT
            SET A, Y
            SUB A, 10
            ; TODO: FINISH
:ROMAAF8    SET PUSH, C
            SET C, 1
            JSR PLOT
            SET [RAM09], Y
            JSR GETBYTC
            IFN A, 0x29 ; close paren
                JMP SNERR
            SET C, POP
            IFE C, 0
                JMP ROMAB0F
:ROMAB09    SET X, A
            SUB A, 9
            IFU A, 0  ; carry clear
                JMP ROMAB0E
            SET C, 0
            JMP ROMAB13
:ROMAB0E    SET X, A
:ROMAB0F    ADD X, 1
:ROMAB10    SUB X, 1
:ROMAB11    IFN X, 0
                JMP ROMAB19
            ; handle semicolon
:ROMAB13    JSR CHRGET
            JMP ROMAAA2
:ROMAB19    JSR OUTSP ; print space. what does it return?
            IFN A, 0
                JMP ROMAB10

; print string form AY

:STROUT
:ROMAB1E    JSR STRLIT ; Scan and set up pointers
            
; print string from $22/$23 [INDEX]

:ROMAB21    JSR ROMB6A6  ; get address in X, length in A
            SET X, A         ; length to X
            SET Y, [INDEX]   ; address to Y
            ADD X, 1
:ROMAB28    SUB X, 1
            IFE X, 0
                RTS
            SET A, [Y]      ; character to A
            JSR ROMAB47 ; print 1 character
            ADD Y, 1
            IFN A, CBM_RETURN  ; cr?
                JMP ROMAB28
:ROMAB35    JSR ROMAAE5  ; write RETURN
            JMP ROMAB28

            
; print character on CMD output file
; calling functions should check A instead of Z

:OUTSP
:ROMAB3B    IFE [CHANNL], 0
                JMP ROMAB42
:ROMAB3F    SET A, 0x20   ; space
            IFE A, -1 ; skip next
:ROMAB42    SET A, CBM_RIGHT   
            IFE A, -1 ; skip next
:OUTQUES
:ROMAB45    SET A, 0x3F  ; question mark
:ROMAB47    JMP ROME10C

; ----------------------------------------------------------------------------
; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
; IN NUMERIC FIELD.  MUST DISTINGUISH
; BETWEEN INPUT, READ, AND GET
; ----------------------------------------------------------------------------
:INPUTERR
:ROMAB4D    SET A, [INPFLG]
            IFE A, INF_INPUT   ;0
                JMP RESPERR
            IFE A, INF_READ
                JMP ROMAB57
            SET Y, -1        ; GET
            JMP ROMAB5B
:ROMAB57    SET A, [DATLIN]
:ROMAB5B    SET [CURLIN], A ; Report error from other line.
            JMP SNERR
:RESPERR    IFE [CHANNL], 0   ; keyboard
                JMP ROMAB6B   ; ask for REDO
            SET X, 0x18 ; ?FILE DATA ERROR
            JMP ERROR

; ?REDO FROM START          
:ROMAB6B    SET A, REDOMSG
            JSR STROUT
            SET [RAM7A], [OLDTXT]
            RTS

:STMT_GET
			JSR ERRDIR  ; program use only
			IFN A, 0x23 ; GET#
			    JMP LC486
			JSR CHRGET
			JSR GETBYT
			SET A, CBM_COMMA
			JSR SYNCHR
			JSR CHKIN
			SET [CHANNL], X
:LC486		SET X, RAM0200+1
			SET [X], 0
			SET A, INF_GET
			JSR PROCESS_INPUT_LIST
			SET X, [CHANNL]
			IFN X, 0
			    JMP ROMABB7
			RTS 

:STMT_INPUTN
:ROMABA5    JSR GETBYT
            SET A, CBM_COMMA
            JSR SYNCHR
            SET [CHANNL], X
            JSR ROME11E   ; CHKIN
            JSR ROMABCE   ; go to main INPUT subroutine
:ROMABB5    SET A, [CHANNL]
:ROMABB7    JSR ROMFFCC   ; clear
            SET [CHANNL], X
            RTS

:STMT_INPUT
:ROMABBF    SET C, 0
            IFN A, CBM_QUOTE 
                JMP ROMABCE
            ; handle INPUT "PROMPT";A$
:ROMABC3    SET C, 1
            JSR STRTXT ; start consuming string
            SET A, 0x3B  ; semicolon
            JSR SYNCHR  ; finish consuming string
            JSR ROMAB21
:ROMABCE    JSR ERRDIR ; handle illegal use in direct mode
:ROMABD1    SET A, CBM_COMMA
            SET [RAM01FF], A
:ROMABD6    JSR NXIN ; get line into input buffer
            IFE [CHANNL], 0
                JMP ROMABEA
:ROMABDD    JSR ROMFFB7    ; get status
            AND A, 2
            IFE A, 0
                JMP ROMABEA
            JSR ROMABB5
            JMP STMT_DATA ; jump to end of statement
:ROMABEA    SET A, INF_INPUT
            IFN [RAM0200], 0
                JMP PROCESS_INPUT_LIST ; pass X as input buffer start
            IFN [CHANNL], 0
                JMP ROMABD6
            JSR DATAN ; get end of line in I
            JMP ROMA8FB ; ... = I, next statement.

; get line into input buffer
; X will be set to character before input buffer
:NXIN
:ROMABF9    IFN [CHANNL], 0
                JMP INLIN
            JSR OUTQUES ; print question mark
            JSR OUTSP   ; print space
:ROMAC03    JMP INLIN

:STMT_READ
:ROMAC06    SET X, [DATPTR]
            SET A, INF_READ 

; ----------------------------------------------------------------------------
; PROCESS INPUT LIST
;
; (X) IS ADDRESS OF INPUT DATA STRING
; (A) = VALUE FOR INPUTFLG
; ----------------------------------------------------------------------------
:PROCESS_INPUT_LIST
:ROMAC0D    SET [INPFLG], A ; INPUT command entry
            SET [INPPTR], X ; start search position
:PROCESS_INPUT_ITEM
:ROMAC15    JSR PTRGET  ; get variable pointer as I
            SET [FORPNT], I  ; we use FORPNT for assignments
            SET [OPPTR], [RAM7A]
            SET [RAM7A], [INPPTR] ; move cursor to reading location
            JSR CHRGOT
            IF_NOT_NEXT_STMT
                JMP INSTART
            IFN [INPFLG], INF_GET ; BVC
                JMP ROMAC41
            JSR ROME124 ; get one character
			SET [RAM0200], A
            SET X, RAM01FF
            JMP ROMAC4D
:ROMAC41    IFE [INPFLG], INF_READ
                JMP ROMACB8
            IFN [CHANNL], 0
                JMP [ROMAC4A]
            JSR OUTQUES ; print question mark
:ROMAC4A    JSR NXIN ; get line into input buffer
:ROMAC4D    SET [RAM7A], X
:INSTART
:ROMAC51    JSR CHRGET
            IFA [VALTYP], -1 ; Numeric
                JMP ROMAC89
            IFN [INPFLG], INF_GET ; BVC
                JMP ROMAC65
:ROMAC5C    ADD X, 1
            SET [RAM7A], X
            SET A, 0
            SET [CHARAC], A
            JMP ROMAC71
:ROMAC65    SET [CHARAC], A
            SET EX, 1 ; add 1 to address if quote matches
            IFE A, CBM_QUOTE
                JMP ROMAC72
            SET [CHARAC], CBM_COLON
            SET A, CBM_COMMA
:ROMAC71    SET EX, 0
:ROMAC72    SET [ENDCHR], A
            SET A, [RAM7A]
            ADX A, 0
            JSR STRLT2  ; STRLIT for unquoted string
            SET [RAM7A], [RAM71] ; move cursor to after string
            JSR ROMA9DA ; assign to a string variable
            JMP INPUT_MORE ; handle any extra
:ROMAC89    JSR FIN ; convert string to float
            SET A, [INTFLG]
            JSR ROMA9C2 ; assign to float or integer.
:INPUT_MORE
:ROMAC91    JSR CHRGOT
            IF_NEXT_STMT
                JMP ROMAC9D
            IFE A, CBM_COMMA ; end of variable
                JMP ROMAC9D
            JMP INPUTERR ; process input errors
:ROMAC9D    SET [INPPTR], [RAM7A]
            SET [RAM7A], [OPPTR] ; return cursor to program listing
            JSR CHRGOT
            IF_NEXT_STMT
                JMP INPDONE  ; no more variables in statement
            JSR CHKCOM              ; OR, comma
            JMP PROCESS_INPUT_ITEM  ; followed by another variable
; find next DATA statement
:ROMACB8    JSR DATAN ; get next statement in I
; todo: finish this I pointer's trek through the program
            ADD I, 1 
            IFN A, 0
                JMP ROMACD1
:ROMACBF    SET X, 0x0D ; ?OUT OF DATA
            ADD I, 1
            IFE [I], 0 ; no next line?
                JMP ERROR ; throw
            ADD I, 1
            SET [DATLIN], [I]
:ROMACD1    SET [RAM7A], I
            JSR CHRGOT
            SET X, A
            IFN X, BASIC_DATA_TOKEN ; DATA code
                JMP ROMACB8
            JMP INSTART
; ---NO MORE INPUT REQUESTED------
:INPDONE
:ROMACDF    SET A, [INPPTR]
            IFE [INPFLG], INF_READ ; bpl
                JMP ROMA827 ; set next line's data stmt
            IFE [A], 0
                RTS
            IFN [CHANNL], 0
                RTS
:ROMACF4    SET A, EXIGNT
            JMP STROUT

:EXIGNT
:ROMACFC
    DAT "?EXTRA IGNORED", CBM_RETURN, 0
:REDOMSG
:ROMAD0C
    DAT "?REDO FROM START", CBM_RETURN, 0

; NEXT statement - see STMT_FOR
:STMT_NEXT
:ROMAD1E    IF_NOT_NEXT_STMT
                JMP ROMAD24
            SET I, 0     ; don't know which variable to advance
            JMP ROMAD27
:ROMAD24    JSR PTRGET   ; get variable to advance in I
:ROMAD27    SET [FORPNT], I
            JSR FNDFOR
            ; [FORPNT] contains the variable we're really looping
            IFE Z, 1    ; found the variable
                JMP ROMAD35
:ROMAD30    SET X, 0x0A ; ?NEXT WITHOUT FOR
            JMP ERROR
:ROMAD35    SET SP, X  ; synchronize stack with that FOR
            ; this discards any inner loops we've skipped
:ROMAD42    SET A, SP
            ADD A, 2   ; pointer to STEP value
            JSR MOVFM  ; set FAC1
            SET [FACSGN], PICK 5
:ROMAD4B    SET A, [FORPNT] ; pointer to loop variable
:ROMAD4F    JSR FADD        ; add to STEP value
            JSR ROMBBD0     ; set loop variable to result
            SET A, SP
            ADD A, 6   ; pointer to TO value
            JSR FCOMP ; compare TO value (I) with loop variable
            ; break out if comparison matches sign of STEP
            IFE A, PICK 5
                JMP ROMAD78
:ROMAD61    ; last time through loop
            SET [CURLIN], PICK 9
            SET [RAM7A], PICK 10
:ROMAD75    JMP NEWSTT
            ; end of loop
:ROMAD78    ADD SP, 11    ; pop FOR block from stack
            JSR CHRGOT
:ROMAD80    IFN A, CBM_COMMA
                JMP NEWSTT
            JSR CHRGET   ; it's NEXT X,Y -- do NEXT Y also
            JSR ROMAD24  ; must JSR so that the POP works.
 
; get formula, enforce that it is a number.
:FRMNUM
:ROMAD8A    JSR FRMEVAL
; check value to be numeric
:CHKNUM
:ROMAD8D    IFU [VALTYP], 0
                JMP ROMAD99
            RTS
:CHKSTR
; check value to be string
:ROMAD8F    IFA [VALTYP], -1
                JMP ROMAD99
            RTS
; check that VALTYP matches C flag
; (VALTYP is string if -1, C is string if >0)
:CHKVAL
:ROMAD90    IFU [VALTYP], 0
                JMP ROMAD97
            IFN C, 0
                JMP ROMAD99
            RTS
:ROMAD97    IFN C, 0
                RTS
:ROMAD99    SET X, 0x16  ; ?TYPE MISMATCH ERROR
            JMP ERROR

                    
; evaluate formula, store result in FAC
; sets [VALTYP] to 0 if result is a floating point number
;                 -1 if result is a string pointer
:FRMEVAL
:ROMAD9E    SUB [RAM7A], 1
            SET X, 0
            IFE X, 1 ; push X instead of A
; if we enter at ROMADA9, we push on the stack:
;   A from [OPMASK]
;   X from somewhere in TBL_OP's left column.
:ROMADA9    SET PUSH, A
:ROMADAA    SET PUSH, X 
            SET A, 1
            JSR GETSTK
            JSR EVAL ; get a single floating point number
            ;GARBDEBUG(0)
            SET [OPMASK], 0
            ; 
:ROMADB8    JSR CHRGOT
:ROMADBB    
; check for comparison operators.  This is a loop so that
; the combinations <>, <=, and => work.
            SUB A, BASIC_GT_TOKEN ; code for greater-than
            IFU A, 0
                JMP ROMADD7
            IFA A, 2         ;CMP #3
                JMP ROMADD7  ;BCS $ADD7
            SHL A, 1         ;CMP #$01
            IFL A, 1         ;ROL
                BOR A, 0x01  ;EOR #$01
            XOR A, [OPMASK]
            IFL A, [OPMASK]  ; can't use same symbol twice
                JMP SNERR    ; in same operator.
            SET [OPMASK], A
            JSR CHRGET
            JMP ROMADBB  ; check for more comparison operators
            ; done detecting comparison operators
:ROMADD7    SET X, [OPMASK] ; parameter for FRM_RELATIONAL
            IFN X, 0  ; comparison operator exists
                JMP FRM_RELATIONAL
            IFA A, -1 ; result from SUB above was positive
                JMP ROMAE58
            ADD A, BASIC_GT_TOKEN-BASIC_PLUS_TOKEN
            IFU A, 0   ; still less than 0
                JMP ROMAE58
            IFE [VALTYP], 0
                ADD A, 1
            IFC A, 0xFF  ; zero in 8-bit
                JMP CAT
:ROMADE8    IFC A, 0x100 ; Carry bit clear in original
                SUB A, 1
            MUL A, 2 ; originally multiplied by 3
            ; Y now contains an index into the operator table.
            SET Y, A
            ; if we're on the right side of an operator,
            ; this POPs the precedence of that operator,
            ; so we know whether to keep going or just
            ; return the value we have so far.
:FRM_PRECEDENCE_TEST
:ROMADF0    SET A, POP
            SET X, [TBL_OP+Y]
            SUB X, 1 ; testing for greater-or-equal
            IFG A, X
                JMP FRM_PERFORM1  ; perform stacked operation
            JSR CHKNUM ; check that term is numeric
:ROMADF9    SET PUSH, A
            ; the value of Y should be set to
            ; a TBL_OP offset at this entry point
:ROMADFA    JSR FRM_RECURSE
:ROMADFD    SET A, POP
            SET Y, [OPPTR]  ; = -1 on 6502 for compares
            IFL Y, 0x80    ; BPL
                JMP ROMAE19
            SET X, A
            IFE X, 0
                JMP GOEX ; pop ARG from stack and...?
            JMP FRM_PERFORM2 ; perform stacked operation
            ; will return to address at top of stack

; handle comparison operators
; the first instruction here was LSR $0D, which I think was there
; to both set VALTYP to "numeric" for all future BMI tests, while
; getting its carry bit from the low bit
; X should be 8, 4, or 2 depending on whether it's <, =, or >.
:FRM_RELATIONAL
:ROMAE07    SHR [VALTYP], 1
            SET C, EX
            SHR C, 15  ; C=1
            SET B, [VALTYP]
:ROMAE09    SHL X, 1
            BOR X, C ; X = X*2 + C
:ROMAE08    SUB [RAM7A], 1
            SET Y, TBL_OP_COMPARE-TBL_OP   ; point to ROMB016 
            SET [OPMASK], X  ; to result of that ROMAE07 shuffle?
            JMP FRM_PRECEDENCE_TEST

; compare orders of precedence
:PREFNC
:ROMAE19    IFL A, [TBL_OP+Y]
                JMP ROMADF9
            JMP FRM_PERFORM2
            
; ----------------------------------------------------------------------------
; STACK THIS OPERATION AND CALL FRMEVL FOR
; ANOTHER ONE
; ----------------------------------------------------------------------------
:FRM_RECURSE
:ROMAE20    
            SET PUSH, [TBL_OP+1+Y] ; push operator for RTS
            JSR ROMAE33  ; push FAC onto stack
            SET A, [OPMASK]
            ; X is set to the order of precedence of
            ; this operator.
            ; A is set to [OPMASK]
            JMP ROMADA9  ; call FRMEVAL on the right side.

; push FAC onto stack (4 WORDS)
; save rounded value of left operand
; X is set to the first column of the operator table
:ROMAE33    SET X, [TBL_OP+Y]
            SET A, [FACSGN]
            ; Other entry points are used by FOR
            ; statement to push floats.
:ROMAE38    SET I, POP
            SET PUSH, A
:ROMAE43    JSR ROUND
            SET PUSH, [FACHO+1]
            SET PUSH, [FACHO]
            SET A, [FACEXP]
            SET PUSH, A
            JMP I    ; instead of RTS

; apply comparison operator
; Pop ARG from stack (4 WORDS)
:ROMAE58    SET Y, -1
            SET A, POP
:GOEX
:ROMAE5B    IFE A, 0 ; oh wait, there's no operator
                JMP ROMAE80
; ----------------------------------------------------------------------------
; PERFORM STACKED OPERATION
;
; (A) = PRECEDENCE BYTE
; STACK:  1 -- CPRMASK
;   5 -- (ARG)
;   2 -- ADDR OF PERFORMER
; ----------------------------------------------------------------------------
:FRM_PERFORM1
:ROMAE5D    IFN A, 0x64   ; comparison operator
                JSR CHKNUM 
:ROMAE64    SET [OPPTR], Y
:FRM_PERFORM2
:ROMAE66    SET A, POP
            SET C, A
            AND C, 1  ; pass most significant bit as C for RELOPS
            SHR A, 1
            SET [RAM12], A ; store comparison result
            SET [ARGEXP], POP 
            SET [ARGHO], POP 
            SET [ARGHO+1], POP 
            SET A, POP
            SET [ARGSGN], A
            XOR A, [FACSGN]
            ASR A, 15
            SET [ARISGN], A
:ROMAE80    SET A, [FACEXP]
:ROMAE82    RTS

; get arithmetic element routine            
; convert a single numeric term, such as
; a number or variable name, from 
; ASCII text to a floating point number
:EVAL
:ROMAE83    JMP [RAM030A]
:DEF_EVAL
:ROMAE86    SET [VALTYP], 0   ; numeric
:ROMAE8A    JSR CHRGET
            IFE C, 0 ; is a digit
                JMP FIN  ; read number into float
:ROMAE92    JSR ISALPHA
            IFE C, 1 ; is alpha
                JMP ROMAF28  ; must be a variable...
:ROMAE9A    IFN A, 0xFF ; PI character
                JMP ROMAEAD
            SET A, PIVAL
            JSR MOVFM
            JMP CHRGET
:PIVAL      DAT 0x82, 0x490F, 0xDAA1  ; float value of PI
            ; not a digit, variable, or pi:
:ROMAEAD    SET C, 1 ; so FIN knows dot isn't a digit
            IFE A, 0x2E ; Decimal point
                JMP FIN ; read a number
            IFE A, BASIC_MINUS_TOKEN
                JMP ROMAF0D
            IFE A, BASIC_PLUS_TOKEN
                JMP ROMAE8A
            IFN A, CBM_QUOTE ; quote mark
                JMP ROMAECC
            SET C, 0
            IFG A, CBM_QUOTE-1 ; carry over from 6502 CMP above
                SET C, 1 
; remember to set C before jumping here.
; this entry point consumes a string in quotes.
:STRTXT
:ROMAEBD    SET A, [RAM7A]
            ADD A, C
            JSR STRLIT
            SET [RAM7A], [RAM71] ; move cursor to after string
            RTS
            ;not a digit, variable, pi, string, or */-
:ROMAECC    IFN A, BASIC_NOT_TOKEN
                JMP ROMAEE3
            SET Y, TBL_OP_NOT-TBL_OP ; vector into TBL_OP
            JMP ROMAF0F

; NOT operator (actually XORs all bits)
:NOTOP
:ROMAED4    JSR AYINT 
            SET A, [FACHO+1]
            XOR A, -1
            JMP GIVAYF

; get operand

:ROMAEE3    IFE A, BASIC_FN_TOKEN ; FN
                JMP FNDOER
:ROMAEEA    IFG A, 0xB3 ; Token for a function or operator 
                JMP ISFUN

; ----------------------------------------------------------------------------
; EVALUATE "(EXPRESSION)"
; ----------------------------------------------------------------------------

:PARCHK
:ROMAEF1    JSR CHKOPN
            JSR FRMEVAL
            ; Fall through to CHKCLS

; CHECK for the appropriate punctuation,
; and skip it.
:CHKCLS
:ROMAEF7    SET A, 0x29  ; close paren
            JMP SYNCHR
:CHKOPN
:ROMAEFA    SET A, 0x28  ; open paren
            JMP SYNCHR
:CHKCOM
:ROMAEFD    SET A, CBM_COMMA
; Next non-whitespace character should be A,
; otherwise it's a syntax error.
:SYNCHR
:ROMAEFF    SET Y, [RAM7A]
            IFE [Y], A
                JMP CHRGET
:SNERR ; ?SYNTAX  ERROR
:ROMAF08    IFE DEBUG_SNERR, 1
                JSR PRINT_EXPECTED
            SET X, 0x0B ; 
            JMP ERROR

:SN_EXPECTED    DAT 0
:SN_GOT         DAT 0
; new feature: prints the character it was expecting
:PRINT_EXPECTED
        SET [SN_EXPECTED], A
        SET [SN_GOT], [Y]
        SET A, EXPECTED_MSG
        JSR STROUT
        SET A, [SN_EXPECTED]
        JSR CHROUT
        SET A, GOT_MSG
        JSR STROUT
        SET A, [SN_GOT]
        IFE A, 0
            JMP SN_GOT_NULL
        JMP CHROUT
:SN_GOT_NULL
        SET A, NULL_MSG
        JMP STROUT
                
:EXPECTED_MSG
    DAT 13,"EXPECTED ", 0
:GOT_MSG
    DAT ", GOT ", 0
:NULL_MSG
    DAT "NULL", 0

; RECURSIVE get value

:ROMAF0D    SET Y, TBL_OP_NEG-TBL_OP ; vector into TBL_OP
:ROMAF0F    SET A, POP  ; discard
            JMP ROMADFA

; Check variable pointer range
; I think it uses a hard-coded top of RAM?
; so I guess I'll do the same.
:ROMAF14    SET A, [RAM64]
            SUB A, BASICMEMEND
            IFE EX, -1  ; underflow
                JMP ROMAF27
            SET A, ROME3A2 ; what is this?
            SUB A, [RAM64]
:ROMAF27    SET C, EX ; set C registor to what
            ADD C, 1 ; 6502 carry bit would have been
            RTS
            
; Get value of variable for EVAL
:ROMAF28    JSR PTRGET  ; get pointer in I
:ISVAR
:ROMAF2B    SET [RAM64], I
            SET X, [VARNAM]
            SET Y, [VARNAM+1]
            IFE [VALTYP], 0
                JMP ROMAF5D
            SET [FACOV], 0
            JSR ROMAF14 ; check VARPNT range?
            ; If not found
:ROMAF3E    IFE C, 0
                RTS
:ROMAF40    ; TODO: Check for TI$
            RTS
            
:ROMAF5C    RTS

:ROMAF5D    IFC [INTFLG], 0x80 
                JMP ROMAF6E
            SET A, [RAM64]  ; get pointer to integer
            SET A, [A]      ; follow pointer
            JMP GIVAYF

:ROMAF6E    JSR ROMAF14  ; check variable pointer range?
            IFE C, 0 ; Not found?
                JMP ROMAFA0
            ; TODO: check for TI and ST
            JMP ROMAFA0
            ; First character of numeric variable
            ; wasn't T, but maybe it's S?
; continue of get value of variable
:ROMAF92    IFN X, 0x53  ; S
                JMP ROMAFA0
            IFN Y, 0x54  ; T
                JMP ROMAFA0
            JSR ROMFFB7  ; get status
            JMP ROMBC3C  ; convert A to float
:ROMAFA0    SET A, [RAM64]
            JMP MOVFM

:ISFUN   ; is a basic function?
:ROMAFA7    SET PUSH, A ; originally *2
            SET X, A
            JSR CHRGET
            IFL X, BASIC_LEFT_TOKEN ; LEFT$ token
                JMP ROMAFD1
            ; handle two-argument functions (LEFT$ etc)
            JSR CHKOPN
            JSR FRMEVAL
            JSR CHKCOM
            JSR CHKSTR ; check value is string
            SET X, POP
            SET PUSH, [RAM64]
            SET PUSH, X
            JSR GETBYT  ; get small integer
            SET Y, POP
            SET A, X
            SET PUSH, A
            JMP ROMAFD6
            ; handle single-argument functions
:ROMAFD1    JSR PARCHK ; evaluate between parens
            SET Y, POP
            SET A, Y ; DEBUG
            SET B, FUNCTION_VECTOR ; DEBUG
            SET C, FUNCTION_ROUTINES
:ROMAFD6    ADD Y, FUNCTION_VECTOR
            JSR [Y]
            JMP CHKNUM ; check return is numeric

; OR/AND operators

:OROP       SET Y, -1
            IFN Y, -1 ; skip next
:ANDOP      SET Y, 0
            SET [RAM0B], Y
            JSR AYINT    ; float to integer
            SET A, [RAM64]
            XOR A, [RAM0B]
            SET [CHARAC], A
            JSR MOVFA
            JSR AYINT
            SET A, [RAM64]
            XOR A, [RAM0B]
            AND A, [CHARAC]
            XOR A, [RAM0B]
            JMP GIVAYF
                

; get time in float accu
:ROMAF84    JSR ROMFFDE
            ; STX $64
            ; STY $63
            ; STA $65
            ; LDY #0
            ; STA $62
            RTS

; comparison operators...
; [VALTYP] refers to the type of the right-hand side
; C should refer to the type of the left-hand side
:RELOPS
:ROMB016    JSR CHKVAL ; make sure VALTYP matches C.
            IFN C, 0   ; string
                JMP STRCMP
            SET A, [ARGSGN]
            BOR A, 0x7FFF
            AND A, [ARGHO]
            SET [ARGHO], A
            SET A, ARGEXP  ; pass pointer to FCOMP
            JSR FCOMP
            SET X, A
            JMP NUMCMP

:STRCMP     ; string compare (incomplete)
:ROMB02E    SET [VALTYP], 0 ; result is numeric
            SUB [RAM4D], 1
            JSR ROMB6A6  ; get string length and address
            SET [RAM61], A  ; store string1 length
            SET [RAM62], X  ; store string1 address
            SET A, [RAM6C]
:ROMB041    JSR FRETMP ; allocate string memory
            SET [RAM6C], X ; store string2 address
            SET X, A       ; store string2 length
            SUB A, [RAM61] ; compare lengths
            IFE A, 0       ; same length
                JMP ROMB056
            SET A, 1       
            IFE EX, -1     ; different length
                JMP ROMB056
            SET X, [RAM61] ; Only compare letters in common
            SET A, -1
:ROMB056    SET [FACSGN], A ; This value will be returned
                            ; if all characters match.
            ; Compare each character
            SET I, [RAM6C]
            SET J, [RAM62]
            ADD X, 1
:ROMB05B    SUB X, 1
            IFN X, 0  
                JMP ROMB066 ; compare additional character
            ; compared all characters, set result
            SET X, [FACSGN] ; to whichever string is longer
:NUMCMP  ; numeric compare (first draft)
:ROMB061    SET I, [ARGHO+1]  ; ($6C),Y
            SET J, [FACHO]  ; ($62),Y
            IFU X, 0 ; BMI
                JMP ROMB072
            SET C, 0
            JMP CMPDONE
:ROMB066    SET A, [I]
            STI B, [J]
            IFE A, B        ; match
                JMP ROMB05B ; next character
            SET X, 1
            IFG A, B
                SET X, -1

:CMPDONE    ; X is -1, 0, or 1
:ROMB072    SET A, X
            ADD A, 1
            shl A, 1
            IFE A, 0
                BOR A, 1
            ; A is 1, 2, or 4, respectively
            AND A, [RAM12]   ; comparison
            IFN A, 0
                SET A, -1
            JMP ROMBC3C   ; convert A to float

:ROMB07E    JSR CHKCOM 
:STMT_DIM   SET [DIMFLG], A  ; DIMFLG to non-zero
            JSR PTRGET3
            JSR CHRGOT
            IF_NOT_NEXT_STMT
                JMP ROMB07E
            RTS
            

;get name and pointer to a variable.
; At the end, the cursor should be at the last character of 
; the variable name.
; Returns pointer in I (originally AY)
:PTRGET
:ROMB08B    JSR CHRGOT
:ROMB090    SET [DIMFLG], 0
:PTRGET3
:ROMB092    SET [VARNAM], A ; store first letter of variable
            ; throw SYNTAX if first character is not a letter.
            JSR CHRGOT
            JSR ISALPHA
            IFE C, 0
                JMP SNERR
            SET X, 0
:ROMB09F    SET [VALTYP], 0  ; numeric
            SET [INTFLG], 0
            JSR CHRGET
            IF_IS_DIGIT
                JMP ROMB0AF
            JSR ISALPHA
            IFE C, 0 ; not alpha
                JMP ROMB0BA
:ROMB0AF    SET X, A
            ; only first two characters count
            ; discard the rest of the variable name
:ROMB0B0    JSR CHRGET
            IF_IS_DIGIT
                JMP ROMB0B0
            JSR ISALPHA
            IFE C, 1 ; is alpha
                JMP ROMB0B0
:ROMB0BA    ; consumed entire name of variable
            ; look for sigil at the end
            IFN A, 0x24 ; $ for string
                JMP ROMB0C4
            SET [VALTYP], -1  ; string
            JMP ROMB0D4
:ROMB0C4    IFN A, 0x25 ; % for integer
                JMP ROMB0DB
            IFN [SUBFLG], 0
                JMP ROMAF08 ; throw error if subscripts not allowed
            SET [INTFLG], 0x80
            BOR [VARNAM], 0x80
:ROMB0D4    BOR X, 0x80
            JSR CHRGET
:ROMB0DB    SET [VARNAM+1], X
            BOR A, [SUBFLG]
            SUB A, 0x28 ; left paren
            IFE A, 0
                JMP ISARY
:ROMB0E7    SET [SUBFLG], 0
            SET I, [VARTAB]  ; pointer
            SET A, [VARNAM]    ; first char of cariable
            SET B, [VARNAM+1]  ; 2nd char of variable
:ROMB0F3    SET [LOWTR], I
            IFE I, [ARYTAB] ; end of table?
                JMP NOTFNS         ; Create a variable
            IFE A, [I]
                IFE B, [I+1]
                    JMP OTHERB185  ; return pointer
:ROMB109    ADD I, 5 ; move pointer to next entry
            JMP ROMB0F3

:OTHERB185  ADD I, 2 ; skip past name to contents
            SET [VARPNT], I
            RTS         

            
; set C=1 if character in A is alphabetic
; might be slightly faster if we converted this
; to use the DCPU-16 EX register.
:ISALPHA
:ROMB113    SET C, 1
            IFL A, 0x41 ; A
                SET C, 0
            IFG A, 0x5B ; Z
                SET C, 0
            RTS
; the NOTFNS routine points here when there's an array,
; but there's nothing special there
:C_ZERO
:ROMBF13    DAT 0,0

:NOTFNS ; Create a new BASIC variable
; VARIABLE POINTERS ARE 5 WORDS INSTEAD OF 7 BYTES
:ROMB11D    IFN PEEK, 0x2A ; Array?
                JMP ROMB128
            ; i am stumped as of now
:ROMB123    SET I, C_ZERO ; ?
            RTS
:ROMB128    SET A, [VARNAM]
            SET Y, [VARNAM+1]
            IFN A, 0x54 ; T
                JMP ROMB13B
            IFE Y, 0xC9 ; I$
                JMP ROMB123
            IFE Y, 0x49 ; I
                JMP ROMAF08 ; can't set TI
:ROMB13B    IFN A, 0x53 ; S
                JMP ROMB143
            IFE Y, 0x54 ; T
                JMP ROMAF08
:ROMB143    SET [LOWTR], [ARYTAB] ; start of source
            SET A, [STREND] ; end of all variables
            SET [HIGHTR], A  ; end of source
            ADD A, 5        ; room for one variable
            SET [HIGHDS], A ; end of destination
            JSR BLTU
            ; move array table up
            ADD [ARYTAB], 5
            SET I, [LOWTR]
            ; bytes 1&2: name
            STI [I], [VARNAM]
            STI [I], [VARNAM+1]
            ; bytes 3-5 depend on type
            STI [I], 0
            STI [I], 0
            STI [I], 0
; Variable found 
:FINPTR
:ROMB185    SUB I, 3 ; set pointer to right after name
            SET [VARPNT], I
            RTS         
; absolutely nothing goes wrong assigning the first variable
; the second variable screws up everything
            

; ----------------------------------------------------------------------------
; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
; was: ARYPNT = (LOWTR) + #DIMS*2 + 5   (5 = 2 + 2 + 1)
; now: ARYPNT = A + #DIMS + 4  
; ----------------------------------------------------------------------------
:GETARY
:ROMB194    SET [LOWTR], A
            SET B, [COUNT]
            ADD B, 4
            ADD B, A
            SET [HIGHDS], B  ; End of destination
            RTS

:N32768
:ROMB1A5    DAT 0x90, 0x8000, 0x0000

; routine to convert float to fixed point
:ROMB1AA    JSR AYINT
            SET A, [FACHO+1]
            RTS

:INTIDX ; Convert floating point subscript
        ; to a positive integer
:ROMB1B2    JSR CHRGET
:ROMB1B5    JSR FRMEVAL
:MKINT
:ROMB1B8    JSR CHKNUM  ; check that term is numeric
            IFG [FACSGN], 0x7F  ; check that it is positive
                JMP FCERR
; convert float to integer
:AYINT
:ROMB1BF    IFL [FACEXP], 0x90
                JMP QINT
            SET A, N32768 ; -32768
            JSR FCOMP
:ROMB1CC    IFU A, 0    ; less than -32768
                JMP FCERR ; Illegal Quantity
            JMP QINT

;Find Array Element or Create New Array in RAM
;
;This routine searches for an array.  If it is found, the subscript
;value is checked to see if it is valid, and pointers to the array and
;element of the array are set.  If it is not found, the array is
;created, and the pointers set.
:ISARY
:ROMB1D1    SET A, [DIMFLG]
            BOR A, [INTFLG]
            SET PUSH, A
            SET PUSH, [VALTYP]
            SET Y, 0
:ROMB1DB    SET PUSH, Y  ; push... subscript?
            SET PUSH, [VARNAM]
            SET PUSH, [VARNAM+1]
            JSR INTIDX ; get subscript
            SET [VARNAM+1], POP
            SET [VARNAM], POP
            SET Y, POP
            ; insert address 2 back in stack
:ROMB1EE    SET B, PEEK
            SET C, PICK 1
            SET PUSH, B
            SET PICK 1, C
            SET PICK 2, [RAM64]
            ADD Y, 1 ; Increase dimension
            JSR CHRGOT
            IFE A, CBM_COMMA
                JMP ROMB1DB
            SET [COUNT], Y
            JSR CHKCLS
            SET [VALTYP], POP
            SET A, POP
            SET [INTFLG], A
            AND A, 0x7F
            SET [DIMFLG], A
; ----------------------------------------------------------------------------
; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
; ----------------------------------------------------------------------------
            SET A, [ARYTAB]
:ROMB21C    ; checked all arrays yet?
            IFE A, [STREND]
                JMP MAKE_NEW_ARRAY
            SET Y, A
            ; check for name match
            IFE [VARNAM], [Y]
                IFE [VARNAM+1], [Y+1]
                    JMP USE_OLD_ARRAY
            SET A, [Y+2]  ; get size of current item
            ADD A, Y      ; derive location of next item
            JMP ROMB21C
            

:BSERR
:ROMB245    SET X, 0x12 ; ?BAD SUBSCRIPT
            JMP ERROR
:FCERR
:ROMB248    SET X, 0x0E ; ?ILLEGAL QUANTITY
            JMP ERROR

; ----------------------------------------------------------------------------
; FOUND THE ARRAY
; ----------------------------------------------------------------------------
:USE_OLD_ARRAY
:ROMB24D    SET X, 0x13 ; ?REDIM'D ARRAY
            IFN [DIMFLG], 0
                JMP ERROR
            JSR GETARY
:ROMB256    SET A, [COUNT] ; number of dimensions in sought array
            SET Y, [LOWTR] ; pointer to found array
            IFN A, [Y+3]   ; number of dimensions in found array
                JMP BSERR
            SET A, [COUNT]
            JMP FIND_ARRAY_ELEMENT

; allocate array
; pre: if DIM, each dimension should be on the stack, and
;      the number of dimensions in [COUNT].
;      regardless, VARNAM should have the array name.
; array data structure:
; 2 words for name
; 1 word for size 
; 1 word for number of dimensions
; for each dimension, 1 word for the size of that dimension
; then the variable values:
.DEFINE SIZEOF_INT, 1
.DEFINE SIZEOF_STR, 2
.DEFINE SIZEOF_FLOAT, 3
:MAKE_NEW_ARRAY
:ROMB261    JSR GETARY
            JSR REASON
            SET Y, [LOWTR]
            SET X, SIZEOF_FLOAT
            SET A, [VARNAM]
            SET [Y], A
            IFB A, 0x80 ; first type bit set
                SUB X, SIZEOF_FLOAT-SIZEOF_STR
            SET A, [VARNAM+1]
            SET [Y+1], A
            IFB A, 0x80 ; both type bits set (can't dim functions)
                SUB X, SIZEOF_STR-SIZEOF_INT
            SET [RAM71], X
            ADD Y, 3
            SET [Y], [COUNT]  ; number of dimensions
            SET X, 11 ; default array size for ad-hoc usage
:ROMB286    ADD Y, 1
            IFC [DIMFLG], 0x40  ; if no DIM statement,
                JMP ROMB296      ; then always one-dimensional
            SET X, POP     ; pop dimension
            ADD X, 1       ; add one so that we can use 0 too 
:ROMB296    SET [Y], X
            MUL [RAM71], X  ; multiply byte count by this dimension.
            IFN EX, 0 ; result >64K
               JMP OMERR
            SUB [COUNT], 1
            IFN [COUNT], 0
                JMP ROMB286  ; next dimension
            SET X, [HIGHDS]
            ADD X, [RAM71]
            IFN EX, 0
                JMP OMERR
            ADD Y, 1
:L30BD
            SET A, Y
            ADD A, [RAM71]  ; might be too far?
            JSR REASON
            ; memory is allocated
            SET [STREND], A
            ; put size of memory block in the array
            ; can't make a direct pointer because this
            ; memory gets moved around a lot.
            SUB A, [LOWTR]
            SET Y, [LOWTR]
            SET [Y+2], A
            ; blank out the array elements
            SET I, [STREND] ; end of memory
            SET J, [RAM71]  ; number of bytes in elements
            SUB I, 1
            ; blank out the array elements
:ARRAYZEROLOOP
            STD [I], 0
            IFN J, 0
                JMP ARRAYZEROLOOP            
            IFN [DIMFLG], 0
                RTS  ; DIM'd the array, don't need to access it.
            ADD Y, 1
            SET [LOWTR], Y                  
; compute reference to array element
; [LOWTR+3] POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
; HIGHDS must have been set by GETARY.
; todo: try replacing RAM71 references with a register
:FIND_ARRAY_ELEMENT
:ROMB2EA    SET I, [LOWTR]
            ADD I, 3
            SET [COUNT], [I]
            SET [RAM71], 0
:ROMB2F2    ADD I, 1   ; point to next dimension
            SET A, POP ; requested index of current dimension
            SET [RAM64], A
            IFL A, [I]
                JMP ROMB30E
            JMP BSERR ; ?BAD SUBSCRIPT
:ROMB30B    JMP OMERR   ;?OUT OF MEMORY
:ROMB30E    IFE [RAM71], 0
                JMP ROMB320
            MUL [RAM71], [I]
:ROMB320    ADD [RAM71], A
            SUB [COUNT], 1
            IFN [COUNT], 0
                JMP ROMB2F2
            ; compute size of each element
            SET A, SIZEOF_FLOAT
            IFB [VARNAM], 0x80 ; first type bit set
                SUB A, SIZEOF_FLOAT-SIZEOF_STR
            IFB [VARNAM+1], 0x80 ; both type bits set (can't dim functions)
                SUB A, SIZEOF_STR-SIZEOF_INT
            MUL A, [RAM71]
            ADD I, A
            ADD I, 1
            SET [VARPNT], I
:ROMB34B    RTS

; fre(0)
:ROMB37D    IFN [VALTYP], 0
                JSR ROMB6A6  
            JSR GARBAG
            SET A, [FREETOP]
            SUB A, [STREND]
            JSR GIVAYF
            IFE [FACSGN], 0
                RTS
            ; make it unsigned by adding 65536
            ; the answer may be >32768.
            SET A, P65536
            JMP FADD
:P65536     DAT 0x91, 0, 0


; throw ?ILLEGAL DIRECT if not in direct mode
:ERRDIR
:ROMB3A6    IFL [CURLIN], 0xFF00
                RTS
            SET X, 0x15 ; ILLEGAL DIRECT
            IFN X, 0x15 ; skip next
:ROMB3AE    SET X, 0x1B ; UNDEF'D FUNCTION
                JMP ERROR

:STMT_DEF
			JSR FNC  ; set DEFPNT to function variable
			JSR ERRDIR
			JSR CHKOPN
			SET [SUBFLG], 0x80
			JSR PTRGET
			JSR CHKNUM
			JSR CHKCLS
			SET A, BASIC_EQ_TOKEN
			JSR SYNCHR
			; push function definition
			SET PUSH, 0
			SET PUSH, [VARPNT] ; Pointer to argument variable
            SET PUSH, [RAM7A]  ; Pointer to function definition
            JSR DATAN
            SET [RAM7A], I
            SET I, [DEFPNT]
            JMP L3250  ; pop and store function definition
; get function name
:FNC
:ROMB3E1    SET A, BASIC_FN_TOKEN ;FN
            JSR SYNCHR
            BOR A, 0x80
            SET [SUBFLG], A
            JSR PTRGET3 ; within PTRGET.
            SET [DEFPNT], I
            JMP CHKNUM ; check that term is numeric
            ;and return
            
; expand FN call
:FNDOER
:ROMB3F4    JSR FNC
			SET PUSH, [DEFPNT]
			JSR PARCHK
			JSR CHKNUM
			SET Y, POP   ; got variable name
			SET [DEFPNT], Y
			SET X, [Y+1] ; get address of argument variable
			IFE X, 0
				JMP ROMB3AE ; UNDEF'D STATEMENT
            SET [VARPNT], X
            ; Push original value of arg variable
            SET PUSH, [X+2]
            SET PUSH, [X+1]
            SET PUSH, [X]
            ; Push current text cursor location
            SET PUSH, [RAM7A]
            SET [RAM7A], [Y]    ; move cursor to function definition
			; Move argument value to argument variable
            JSR STORE_FAC_AT_X_ROUNDED
            SET PUSH, [VARPNT]
            JSR FRMNUM
            SET I, POP
            SET [DEFPNT], I
            JSR CHRGOT
            IFN Z, 1
            	JMP SNERR
            SET [RAM7A], POP
:L3250		STI [I], POP  ; originally 5 bytes
            STI [I], POP
            STI [I], POP
			RTS
:STRD
:ROMB465    JSR CHKNUM ; arg must be numeric
            SET Y, FLOATSTR-1
            JSR FOUT1   ; FOUT starting at Y
            SET A, POP  ; originally 2x PLA
:ROMB46F    SET A, FLOATSTR-1
            JMP STRLIT
            
; ----------------------------------------------------------------------------
; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
; ADDRESS IS IN RAM64 AND WHOSE LENGTH IS IN A-REG
; ----------------------------------------------------------------------------
:STRINI
:ROMB475    SET [DSCPNT], [RAM64]
; ----------------------------------------------------------------------------
; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
; ADDRESS IS IN X AND WHOSE LENGTH IS IN A-REG
; ----------------------------------------------------------------------------
:STRSPA
:ROMB47D    JSR GETSPA    ; Allocate Memory in A
            SET [RAM62], X  ; string address 
            SET [RAM61], A  ; string length
            RTS


; get description of string into a location
; on the temporary string stack.
; Pass: A as location of string.
;       [CHARAC] as ...
;       [ENDCHR] as the end character, 0x22 or 0x00.
; Returns: length, then address, stored to the
;          location pointed to by TEMPPT.
;          2 added to [TEMPPT]
; Should set [INDEX]
; stores length in [RAM61]
; stores address in [RAM62]
:STRLIT
:ROMB487    SET X, CBM_QUOTE ; quote
            SET [CHARAC], X
            SET [ENDCHR], X
; enter here if CHARAC and ENDCHR aren't quotes
:STRLT2
:ROMB48D    SET [RAM6F], A   ; String pointer
            SET [RAM62], A   ; String beginning pointer
            ; LOOP to...???
            SET I, [RAM6F]
            SUB I, 1

:ROMB497    ADD I, 1
:ROMB498    SET A, [I]         ; get character
            IFE A, 0
                JMP ROMB4A8
            IFE A, [CHARAC]    ; 
                JMP ROMB4A4
            IFN A, [ENDCHR]    ;
                JMP ROMB497
:ROMB4A4    
:ROMB4A8    
:ROMB4A9    SET Y, I         ; subtract original pointer
            SUB Y, [RAM6F]   ; to obtain the length
            IFE A, CBM_QUOTE 
                ADD I, 1     ; put end past trailing quote
            SET [RAM61], Y  ; Length in [RAM61]
            SET [RAM71], I  ;originally had to add Y to RAM6F
            ; oh wait this is a test on MSB of RAM6F
            SET A, [RAM6F]
            ; i think this bit here is set to treat
            ; stuff in the 200-2FF range different from
            ; stuff in the ROM range
:ROMB4B7    IFE [RAM6F], 0   ; test for whatever happens below B4D5.
                JMP ROMB4BF  ; it makes the memory copy unconditional
            IFG A, RAM0200+BASIC_BUFFER_LENGTH ; not immediate mode
                JMP PUTNEW  ; skip memory copy 
            IFU A, RAM0200
                JMP PUTNEW  ; skip memory copy
            ; if it's in the temporary string area,
            ; it needs to be moved into memory
:ROMB4BF    ; Y should have a string length now
            ; and RAM6F should be the start of source memory
            SET A, Y        ; send A as length
            JSR STRINI     ; send destination in [FRESPC]
            SET X, [RAM6F]  ; send source as X
            JSR MOVSTR     ; move string to [FRESPC]
; ----------------------------------------------------------------------------
; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
;
; THE DESCRIPTOR IS NOW IN FAC, FAC+1
; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+2,3
; ----------------------------------------------------------------------------
:PUTNEW
:ROMB4CA    IFU [TEMPPT], TEMPSTEND 
                JMP ROMB4D5 
            ; if no room on stack
:ROMB4D0    SET X, 0x19 ; ?FORMULA TOO COMPLEX
            JMP ERROR
:ROMB4D5    SET I, [TEMPPT] ; current pointer location
            SET [LASTPT], I
            SET [RAM64], I    ; Pointer to pointer 
            STI [I], [RAM61]    ; Length  I++
            SET [I], [RAM62]    ; Pointer
            SET [FACOV], 0 ; literal translation
            SET [RAM6F], 0 ; probably meant to do this
            STI [VALTYP], -1 ; string     I++
            SET [TEMPPT], I  ; originally I+2
            RTS
;
:STRDEBUG
            ;SET A, [TEMPPT]
            ;SET B, TEMPST
            ;SET C, TEMPSTEND
            ;SET X, [FACEXP]
            ;SET Y, [FACHO]
            SET B, [RAM7A]
            DAT 0x3400
            RTS



; allocate number of bytes in A
; The amount of space needed for a string is 
; passed to this routine, and the routine checks 
; if there is that amount of space available in free
; memory. If not, it does a garbage collection and 
; tries again.
; Returns original length requested in A
; Returns address in X (originally XY)
; Single string ptr -- includes variable name and extra byte.
.DEFINE GARB_LG, 5
; Array pointer -- contains only length and address
.DEFINE GARB_SM, 2
; The first time through, I was under the impression that
; the C64 version cached a lot of zero-page memory, but I
; can't seem to find the code that did that.  So I'll just
; re-use the variables in the same way, which is probably
; important since they serve as parameters to BLTU.
; ----------------------------------------------------------------------------
; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
; (A)=# BYTES SPACE TO MAKE
;
; RETURN WITH (A) SAME,
;   AND FRESPC = X = ADDRESS OF SPACE ALLOCATED
; ----------------------------------------------------------------------------
:GETSPA
:ROMB4F4    SHR [GARBFL], 1
:ROMB4F6    ;WARNING: potential for off-by-one error here
            SET X, [FREETOP] ; pointer to end of free RAM
            SUB X, A         ; subtract length of string
            IFL X, [STREND]  ; compare with start of free RAM
                JMP ROMB516
            SET [FREETOP], X ; allocate free RAM
            SET [FRESPC], X ; temporary space for strings
            ; A still contains the length 
            RTS
:L3311            
:ROMB516    SET X, 0x10    ; ?OUT OF MEMORY ERROR
            IFG [GARBFL], 0x7f
                JSR GARBAG
            SET [GARBFL], 0x80
            JMP ROMB4F6
; ----------------------------------------------------------------------------
; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
; BELOW STRING AREA DOWN TO STREND.
; ----------------------------------------------------------------------------
:GARBAG
:ROMB526    SET I, [MEMSIZ]
:FINDHIGHESTSTRING
:ROMB52A    SET [FREETOP], I
            SET [DEFPNT], 0
; LOWTR will be set to the highest string variable that is
; actually referenced somewhere in the program.
            SET [LOWTR], [STREND]
; check all temporary string pointers
            SET I, TEMPST   ; pointer to string stack
:ROMB544    IFE I, [TEMPPT]
                JMP ROMB54D
            JSR CHECK_VARIABLE
            JMP ROMB544 ; compare next I
; check all scalar string pointers
:ROMB54D    SET [DSCLEN], GARB_LG  ; bytes per variable
            SET I, [VARTAB]
:ROMB559    IFE [ARYTAB], I
                JMP ROMB566
            JSR CHECK_SIMPLE_VARIABLE
            JMP ROMB559 ; compare next I
; check all array string pointers
:ROMB566    SET [HIGHDS], I
            SET [DSCLEN], GARB_SM ; number of bytes
:ROMB56E    SET I, [HIGHDS]
:ROMB572    IFE [STREND], I
                JMP MOVE_HIGHEST_STRING_TO_TOP
:ROMB57D    SET [INDEX], I ; probably just need to cache
:ROMB581    ADD [HIGHDS], [I+2] ; add array size in bytes
            ; HIGHDS now points to next array
            IFC [I], 0x80
                JMP ROMB56E   ; Not a string, go to next array
            IFB [I+1], 0x80
                JMP ROMB56E   ; Not a string, go to next array
            ; get string array
            ADD I, 3   ; I now points to number of dimensions
            ADD I, [I] ; Add number of dimensions
            ;Loop through all string pointers here.
:ROMB5B0    IFE I, [HIGHDS] ; reached end of array?
                JMP ROMB572 ; go to next array
:ROMB5B8    JSR CHECK_VARIABLE
            JMP ROMB5B0
                
; ----------------------------------------------------------------------------
; PROCESS A SIMPLE VARIABLE
; ----------------------------------------------------------------------------
:CHECK_SIMPLE_VARIABLE
:ROMB5BD    SET A, [I]
            SET B, [I+1]
            ; check type bits in the name.
            IFB [I], 0x80  
                JMP CHECK_BUMP ; not a string; skip.
            IFC [I+1], 0x80 
                JMP CHECK_BUMP ; not a string, skip.
            SET Y, I
            ADD Y, 2 ; set Y to pointer after name.
            IFE Y, 0 ; skip default Y in next instruction
; ----------------------------------------------------------------------------
; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
; ----------------------------------------------------------------------------
; pass address of string desriptor in I? 
; This needs to return I
:CHECK_VARIABLE
:ROMB5C7    SET Y, I
            IFE [Y], 0   ; If zero length
                JMP CHECK_BUMP ; skip
            SET A, [Y+1]   ; Get pointer to string data
            IFL A, [FREETOP]  ; if it's in the area being searched
                JMP ROMB5DC   ; then proceed
            JMP CHECK_BUMP    ; otherwise skip; it's already sorted
:ROMB5DC    IFG A, [LOWTR]
                JMP ROMB5E6
            JMP CHECK_BUMP
:ROMB5E6    SET [LOWTR], A
            SET [DEFPNT], I
            SET [RAM55], [DSCLEN]
; ----------------------------------------------------------------------------
; ADD (DSCLEN) TO PNTR IN I
; ----------------------------------------------------------------------------
:CHECK_BUMP
:ROMB5F6    ADD I, [DSCLEN]
:ROMB601    RTS

; ----------------------------------------------------------------------------
; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
; TO TOP AND GO BACK FOR ANOTHER
; ----------------------------------------------------------------------------
:MOVE_HIGHEST_STRING_TO_TOP
:ROMB606    ;GARBDEBUG(0x0D) ; M for MOVE
            ; defpnt isn't getting set 
            IFE [DEFPNT], 0
                JMP ROMB601
            ;GARBDEBUG(0x21) ; ! for actually happening
            SET Y, [RAM55]  ; a cached DSCLEN
            SET I, [DEFPNT] ; contains the address of a descriptor
            IFE Y, GARB_LG  ; is a scalar
                ADD I, 2    ; point past the name
            SET [RAM55], I  ; hide link
            SET A, [I]      ; get length of string
            ADD A, [LOWTR]  ; index past LOWTR that far
            SET [HIGHTR], A         ; Source end + 1
            SET [HIGHDS], [FREETOP] ; Destination end + 1
            JSR BLTU2 ; copy memory, get next FREETOP in I.
            SET X, [RAM55]  ; recover index
            ADD X, 1        ; point to address
            SET [X], I      ; first byte of destimation
            JMP FINDHIGHESTSTRING

; JOINING STRINGS
:CAT
:ROMB63D    ; DEBUG STACK POINTER
            SET PUSH, [RAM64]
            JSR EVAL
            JSR CHKSTR ; check that value is string
            SET [RAM6F], POP
            SET Y, [RAM6F]
            SET A, [Y]  ; Get length of first string
            SET Y, [RAM64]
            ADD A, [Y]  ; Get length of second string
            IFL A, 0x100 ; TODO: make customizable
                JMP ROMB65D
            SET X, 0x17 ; ?STRING TOO LONG
            JMP ERROR
:ROMB65D    JSR STRINI ; allocate memory, store len/ptr in A/X
            JSR MOVINS  ; move string in [RAM6F] to temporary string
            SET A, [DSCPNT]
            JSR FRETMP ; set [INDEX] to [DSCPNT] then de-allocate 
            JSR MOVSTR1 ; copy that too.
            SET A, [RAM6F]
            JSR FRETMP ; set [INDEX] to [RAM6F] then de-allocate
            JSR PUTNEW ; save descriptor on stack
            JMP ROMADB8

; move string
; move string pointed to by RAM6F, into that pointed to by INDEX.
:MOVINS
:ROMB67A
            SET Y, [RAM6F]
            SET A, [Y]
            SET X, [Y+1]

; move string with length A,
; from [INDEX] or X to [FRESPC]
; if you jump to MOVSTR1, [INDEX] should already be set
:MOVSTR
:ROMB688    SET [INDEX], X
:MOVSTR1
:ROMB68C    SET I, [INDEX]  ; source
            IFE A, 0   ; zero length
                RTS    ; do nothing
            ADD I, A        ; source
            SET J, [FRESPC] ; destination
            SET C, J  
            SUB C, 1 ; loop end condition
            ADD J, A
            IFE A, 0
                JMP ROMB699
            STD A, A ; Starting at last character
:ROMB690    STD [J], [I]
            IFU C, J
                JMP ROMB690
:ROMB699    ADD [FRESPC], A ; set pointer to byte after string
            RTS

; returns an address in X
;    and a length in A
; ----------------------------------------------------------------------------
; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
; ----------------------------------------------------------------------------
:FRESTR
:ROMB6A3    JSR CHKSTR
; ----------------------------------------------------------------------------
; IF STRING DESCRIPTOR POINTED TO BY [RAM64] IS
; A TEMPORARY STRING, RELEASE IT.
; ----------------------------------------------------------------------------
:FREFAC
:ROMB6A6    SET A, [RAM64]
; ----------------------------------------------------------------------------
; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN A IS
; A TEMPORARY STRING, RELEASE IT.
; ----------------------------------------------------------------------------
:FRETMP
:ROMB6AA    SET [INDEX], A
            JSR FRETMS   ; Move LASTPT to TEMPPT
            SET Y, [INDEX] ; though it's also in [INDEX]
            SET A, [Y]    ; length?
            SET X, [Y+1]  ; address?
            ; Don't deallocate if...
            IFE Z, 0  ; the original A wasn't LASTPT.
                JMP ROMB6D6
            IFN X, [FREETOP] ; the address isn't top of memory
                JMP ROMB6D6
            ; DEALLOCATE bytes
            ADD [FREETOP], A
            ; XY in original 6502
:ROMB6D6        SET [INDEX], X
:ROMB6DA        RTS

; ----------------------------------------------------------------------------
; RELEASE TEMPORARY DESCRIPTOR IF A = LASTPT
; ----------------------------------------------------------------------------
; If A is not found, set Z to 0
:FRETMS
:ROMB6DB    SET Z, 0
            IFN A, [LASTPT]
                RTS
            SET [TEMPPT], A
            SUB A, 2  ; size of a string pointer
            SET [LASTPT], A
            SET Z, 1
            SET Y, 0
            RTS
:CHRD
:ROMB6EC    JSR CONINT  ; get byte operand
            SET PUSH, X  ; push byte result
            SET A, 1
            JSR STRSPA   ; create a string 
            SET A, POP
            SET Y, [RAM62]  ; get address
            SET [Y], A      ; set ASCII value of only character
            SET A, POP
            JMP PUTNEW ; save descriptor in $61 on stack
:LEFTD
:ROMB700    JSR SUBSTRING_SETUP ; return Y as DSCPNT
            SET A, 0 ; left side
:ROMB706    IFL A, [Y]  
                JMP ROMB70C  ; 
            IFE A, [Y]  
                JMP ROMB70C  ; 
            ; if parameter is longer than length
            ; then return entire string
            SET X, [Y]
            SET A, 0
:ROMB70C    SET PUSH, A  ; push starting index
:ROMB70D    SET A, X
:ROMB70E    SET PUSH, A  ; push length
            JSR STRSPA   ; allocate number of bytes in A
            SET A, [DSCPNT] ; get address of descriptor
            JSR FRETMP   ; deallocate?
            ; returns A length and X dest address
            ; and dest address in [INDEX]
            SET A, POP  ; pop length
            ; originally only pulled one Y .  
            SET X, POP  ; pop offset
            ADD [INDEX], X
            JSR MOVSTR1 ; move string with length A
:ROMB729    JMP PUTNEW
:RIGHTD
:ROMB72D    JSR SUBSTRING_SETUP ; get parameters
            ; set starting index to string length
            ; minus the parameter
            SUB A, [Y]
            MUL A, -1
            JMP ROMB706
:MIDD
:ROMB737    SET [RAM64], -1 ; default: get all bytes
            JSR CHRGOT
            IFE A, 0x29 ; clos paren
                JMP ROMB748 ; default to end-of-string
            JSR CHKCOM
            JSR GETBYT ; length to extract in [RAM64]
:ROMB748    JSR SUBSTRING_SETUP ; Y=DSCPNT, A=index
			IFE A, 0  ; zero index requested
                JMP FCERR ; illegal quantity error
            SUB A, 1     ; convert 1-based index to 0-based offset
            SET PUSH, A
            SET X, 0
            STI I, [Y]  ; I <- [Y]+1 
            SUB A, I    ; SBC [[DSCPNT]]
            IFE EX, 0 ; if start index > real string length
                JMP ROMB70D 
            XOR A, -1 ; get number of characters left after index
            IFL A, [RAM64]     ; if fewer bytes left than requested 
                JMP ROMB70E
            SET A, [RAM64] 
            JMP ROMB70E

:ROMB39E    SET C, 1
            JSR PLOT
:ROMB3A2    SET A, 0
            JMP GIVAYF

; get first 2 parameters for LEFT$/RIGHT$/MID$
; returns A as numeric parameter
; returns Y as pointer to string descriptor
:SUBSTRING_SETUP
:ROMB761    JSR CHKCLS
            SET J, POP ; RTS address (was 2)
            SET A, POP ; discard - was 2
            SET A, POP ; first numeric parameter
            SET Y, POP ; pointer to string descriptor
            SET [DSCPNT], Y
            JMP J

; LEN function 
:ROMB77C    JSR GETSTR
            JMP GIVAYF

; ----------------------------------------------------------------------------
; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
; ----------------------------------------------------------------------------
:GETSTR
:ROMB782    JSR FRESTR  ; get length in A
            SET [VALTYP], 0 ; returning a number
            SET Y, A     
            RTS

; ASC function
:ASCN
:ROMB78B    JSR GETSTR
            IFE A, 0
                JMP FCERR
            SET Y, [INDEX]
            SET A, [Y]
            JMP GIVAYF

; get an integer that fits into a byte
:GETBYTC
:ROMB79B    JSR CHRGET
:GETBYT
:ROMB79E    JSR FRMNUM  ; get formula in FAC
:CONINT     ; Convert FAC to integer and return as X
:ROMB7A1    JSR MKINT ; convert to integer
            SET X, [RAM64]
            JMP CHRGOT

:VAL
:ROMB7AD    JSR GETSTR
            IFE A, 0
                JMP ROMB7B5
            JMP ROMB8F7 ; zero FACEXP and FACSGN
:ROMB7B5    SET X, [RAM7A]
            SET [RAM71], X
            SET A, [INDEX]
            SET [RAM7A], A
            ADD X, A
            ; wait, did we just add two pointers?
            ; I need to examine what ROMB6A3 returns in [INDEX].
            DAT 0x2000
:ROMB7D7    JSR CHRGOT
            JSR FIN
            SET A, POP
            SET [J], 0
            ; move BASIC text cursor to end of string.
:ROMB7E2    SET [RAM7A], [RAM71]
            RTS

.include "poke.dasm16"

:ROME386
            SET X, 0x80
            JMP [IERROR] ;normally E38B
:DEF_ERROR    
:ROME38B ; error message handler
            IFG X, 0x7F
                JMP READY
            JMP BASIC_ERROR
    
:ROME394  ; ** COLD START BASIC
            ;JSR ROME453 ; don't need to initialize vectors
            JSR INIT ; Initialize BASIC
            JSR ROME422 ; Print start-up messages
            SET SP, STACKBASEND
            JMP ROME386


:INIT
:ROME3BF
            SET A, 0x4C ; ? 
            SET [USRPOK], A
            SET [RAM0311], FCERR
            SET [RAM05], GIVAYF
            SET [RAM03], ROMB1AA
            ; skipped code that copies CHRGET/CHRGOT
            SET [DSCLEN], 2  ; single string descriptor
            SET [BITS], 0
            SET [CHANNL], 0
            SET [LASTPT], 0
            ; TODO: figure out why we're doing this
            ; with the stack
            ;SET [RAM01FD], 1
            ;SET [RAM01FC], 1
            SET [TEMPPT], TEMPST ; string stack to beginning
            SET C, 1
            SET B, 123
            JSR MEMBOT
            ; Set [TXTTAB] to beginning of BASIC area
            SET [TXTTAB], X
            SET B, 0xFFFF
            SET C, 1
            JSR MEMTOP
            SET [MEMSIZ], X
            SET [FREETOP], X
            SET Y, [TXTTAB]
            SET [Y], 0
            ADD [TXTTAB], 1
            RTS   ; 0x4B1?

    ; PRINT BASIC STARTUP MESSAGES
:ROME422
            SET A, [TXTTAB]
            JSR REASON
            SET A, ROME473  ; COMMODORE 64 BASIC V2
            JSR STROUT
            ; Calculate number of basic bytes free
            SET A, [MEMSIZ]
            SUB A, [TXTTAB]
            JSR LINPRT
            SET A, WORDS  ; BASIC BYTES FREE
            JSR STROUT
            ; prefill keyboard buffer with 
            JSR RUN_TEST_STRING
            ; go to READY prompt
            JMP SCRTCH  ; NEW statement.
            
; startup messages

:WORDS      DAT " BASIC BYTES FREE"
            DAT CBM_RETURN, 0
:ROME473    DAT CBM_CLR ;to clear the screen
            DAT 0x99 ; light green
            DAT "DCPU-16 BASIC "
            DAT 0x90 ; black
            DAT "ALPHA"
            DAT 0x9A ; light blue
            DAT CBM_RETURN
            DAT 0
:ROME4AC    DAT 0x81


.INCLUDE "math.dasm16"


