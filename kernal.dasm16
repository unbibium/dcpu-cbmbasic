;----------------
;  KERNAL MAIN
;----------------

; I'm leaving the last 1/16 of memory for machine language
; programs, I guess.
.DEFINE BASICMEMEND, 0xEFFF

; PETSCII constants
.DEFINE CBM_STOP, 0x03
.DEFINE CBM_RETURN, 0x0D
.DEFINE CBM_DELETE, 0x14
.DEFINE CBM_INSERT, 0x94
.DEFINE CBM_UP, 0x91
.DEFINE CBM_DOWN, 0x11
.DEFINE CBM_LEFT, 0x9D
.DEFINE CBM_RIGHT, 0x1D
.DEFINE CBM_HOME, 0x13
.DEFINE CBM_CLR, 0x93
.DEFINE CBM_SPACE, 0x20
.DEFINE CBM_QUOTE, 0x22
.DEFINE CBM_COMMA, 0x2C
.DEFINE CBM_COLON, 0x3A
.DEFINE CBM_RUN, 0x83


:ROMA000    DAT ROME394     ; Vector for starting BASIC
:ROMA002    DAT ROME37B

; C64 RAM equivalents
;

.INCLUDE basic.dasm16
.INCLUDE keyboard.dasm16
.INCLUDE screen.dasm16

; scroll pointer
:SCPNT  DAT 0
:RAMB2  DAT 0
:RAMC1  DAT 0

; keyboard memory
;
; Keyboard Decode Table
:KEYTAB 
:RAMF5 DAT 0

; another floating point conversion thingy
:BASZPT 
:RAMFF DAT 0

;------

; This block of 256 bytes had the same function as the 6502 stack.
; Notable differences include:
;    originally, GOSUB pushed 5 bytes on the stack; now it pushes 3.
:STACK         
              .FILL BLANK, 256
:STACKBASEND
                .FILL BLANK, 6
:STACKEND


:RAM0277    ;KEYBOARD BUFFER
:KEYD
    .FILL 32, KEYBOARD_BUFFER_SIZE

:RAM01FB  DAT 0
:RAM01FC  DAT 0
:RAM01FD  DAT 0
:RAM01FE  DAT 0
:RAM01FF  DAT 0
:RAM0200  ; String buffer?
    .FILL 0, BASIC_BUFFER_LENGTH
:RAM0281 
:MEMSTR   ; Start of memory, only used once
        DAT BASICMEM
:RAM0283  ; End of memory found by RAMTAS
        DAT BASICMEMEND
:RAM0285 ; ???
        DAT 0

:RAM0289
:XMAS   DAT 10
:RAM0291
:MODE       DAT 0

; BASIC Indirect Vector Table
; if you guys want to port the DOS wedge go ahead
:RAM0300
:IERROR     DAT DEF_ERROR
:RAM0302
:IMAIN      DAT DEF_MAIN
:RAM0304
:ICRNCH     DAT DEF_CRUNCH    ; crunch tokens
:RAM0306
:IQPLOP     DAT DEF_QPLOP    ; print tokens
:RAM0308
:IGONE      DAT GONE        ; execute statement?
:RAM030A
:IEVAL      DAT DEF_EVAL
:RAM030C    DAT 0
; IRQ
:RAM0314    DAT ROMEA31
:RAM0316    DAT 0
:IIOBASE
:RAM0318    DAT ROME500
:IOPEN
:RAM031A    
            DAT DEF_OPEN
:ICLOSE
:RAM031C    DAT DEF_CLOSE
:ICHKIN
:RAM031E    DAT DEF_CHKIN
:ICHKOUT
:RAM0320    DAT DEF_CHKOUT
:ISOMETHING
:RAM0322    DAT ROMF333
:ICHRIN
:RAM0324    DAT DEF_CHRIN
:ICHROUT
:RAM0326    DAT DEF_CHROUT
:ISTOP
:RAM0328    DAT DEF_STOP
:IGETIN 
:RAM032A    DAT DEF_GETIN
:ICLALL  
:RAM032C    DAT DEF_CLALL
:RAM033C    DAT 0

; TODO: use preprocessor to hide all the debugging code
; when HW_ROWS >= 12.

; Error handler for IO calls
:ROME0F9    IFN A, 0xF0
                JMP ROME104
            ; 0xF0 is a special error?
            SET [MEMSIZ], X
            JMP ROMA663
:ROME104    IFE X, 0
                SET X, 0x1E   ; BREAK
            JMP ERROR

; CHROUT/CHRIN plus error checking for BASIC
; (treats EX as error flag, X as error number)
:ROME10C    JSR [ICHROUT]
            IFN EX, 0 ; carry bit set
                JMP ROME0F9
            RTS
:ROME112    JSR [ICHRIN]
            IFG EX, 0
                JMP ROME0F9
            RTS
:ROME118    JSR ROME4AD
            IFG C, 0
                JMP ROME0F9
            RTS
:ROME11E    JSR CHKIN
            IFG C, 0
                JMP ROME0F9
            RTS
:ROME124    JSR GETIN
            IFG C, 0
                JMP ROME0F9
            RTS
            
:ROME4AD
            SET PUSH, A
            JSR ROMFFC9
            SET  X, A
            SET A, POP
            IFE C, 0
                RTS
            SET A, X
            RTS

; special debugging code that shows
; where all the line links are
:LINELINKS
		SET PUSH, A
		SET PUSH, B
		SET PUSH, C
		SET A, 0
		SET B, SCREENMEM+HW_COLS-1
:LINELINKSLOOP
        SET C, 0x0500
		IFE [LDTB1+A], DL_UNLINKED
		    SET C, 0x0600
        AND [B], 0xF0FF
        BOR [B], C
        ADD B, HW_COLS
        ADD A, 1
        IFL A, HW_ROWS
            JMP LINELINKSLOOP
    	SET C, POP
    	SET B, POP
    	SET A, POP
    	RTS

; *****************************************************
;    Normal IRQ Interrupt 
;
; This runs 60 times per second, and has the following
; duties:
;   * Update system clock
;   * Blink the cursor if it is visible
;   * Scan the keyboard, add new characters to the
;     keyboard buffer.
; *****************************************************
:IRQ_HANDLER
:ROMEA31    
            ; some debugging for last line link bugs
            ;JSR LINELINKS

            ;JSR ROMFFEA ; do clock
            IFN [BLNSW], 0
                JMP ROMEA61
            ; FLASH CURSOR
            SUB [BLNCT], 1
            IFN [BLNCT], 0
                JMP ROMEA61
            SET [BLNCT], BLINK_FRAMES
            XOR [BLNON], 1  ; was last blink on/off?
            SET A, [PNTR] ; CURSOR POSITION
            ADD A, [PNT]
            IFE [BLNON], 0  ; last blink was off
                JMP ROMEA5C
            SET [GDBLN], [A] ; store chr under cursor
            ;JSR ROMEA24
            SET Y, [COLOR]
            SET X, Y
            AND Y, 0x0F00
            SHL Y, 4
            AND X, 0xF000
            SHR X, 4
            BOR X, Y
            AND [A], 0xFF   ; blink on-phase
            BOR [A], X
            IFE A, -1 ; SKIP
:ROMEA5C    SET [A], [GDBLN] ; blink off-phase
:ROMEA61    ; check cassette?
:ROMEA7B    JSR ROMEA87 ; scan keyboard
            SET Y, POP
            SET X, POP
            SET EX, POP
            RFI -1

; I appropriated this to display another
; chunk of memory in the status bar.
:DISPLAY_LINK_TABLE
        SET PUSH, I
        SET PUSH, J
        SET I, LDTB1
        SET J, DEBUGLNK-1
:LINKLOOP
        STI X, [I]
        SET [J], 0x192E
        IFC X, DL_UNLINKED
            SET [J], 0x1921
        IFL I, LDTB1+HW_ROWS+3
        JMP LINKLOOP
        SET J, POP
        SET I, POP
        RTS

:HEXTHING
   .FILL 48, 10
   .FILL -9, 6
:DISPLAY_KEY_DEBUG
        ; debugging code to display some registers every frame
        SET Y, [COUNT]  ; 
        SET X, DEBUGKEY+9
        SET PUSH, B
:DBGLOOP
    ; display Y register in hex in debugging line
        SET B, Y
        AND B, 0x0F
        ADD B, [HEXTHING+B]
        SET [X], B
        BOR [X], 0xF000
        DIV Y, 0x10
        SUB X, 1
        IFG X, DEBUGKEY+5
           JMP DBGLOOP
        ; another one
        SUB X, 1
        SET Y, [VARTAB]
        ;SET [Y], 0x41
:DBGLOOP2
    ; display Y register in hex in debugging line
        SET B, Y
        AND B, 0x0F
        ADD B, [HEXTHING+B]
        SET [X], B
        BOR [X], 0xF000
        DIV Y, 0x10
        SUB X, 1
        IFG X, DEBUGKEY+0
           JMP DBGLOOP2
        SET B, POP

:ROMEAE0 
;Decode the Keystroke and Place its ASCII Value in the Keyboard Buffer


:ROMEB48    ;Set up proper keyboard decode table
            RTS
; load/run for RUN key

:ROMEC44    IFN A, 0x0E ; Lowercase code
                JMP ROMEC4F
            ; TODO: FINISH
:ROMEC4F    IFN A, 0x8E ; Uppercase code
                JMP ROMEC5E
            ; TODO: FINISH
            
; SHIFT-C= KEY CHECK
:ROMEC5E
    ; TODO: FINISH
            JMP ROME6A8
       
            
; KERNAL STUBS
:ROME37B    RTS

:DEF_IOBASE
:ROME500    RTS


; In CBM BASIC, this was copied to 0073.
; In DCPU-16, I'm just defining this address
; because there's a BASIC variable fetch routine
; that inexplicably used this address as some
; kind of comparison.
:INITAT
:ROME3A2    dat 0x9000


:ROMF017    ; RS232-related
            RTS
:ROMF12B    ; print kernal message indexed by Y
            ; send complete address in Y
            IFC [MSGFLG], 0x80 
                JMP ROMF13C
:ROMF12F    SET A, [Y]
            SET PUSH, A
            JSR CHROUT
            ADD Y, 1
            SET A, POP
            IFL A, 0x80
                JMP ROMF12F
:ROMF13C    SET C, 0 ; no error
            RTS
:ROMF1FC    RTS
:DEF_UDTIM
:ROMF69B    RTS
:DEF_RDTIM
:ROMF6DD    RTS
:DEF_SETTIM
:ROMF6E4    RTS
:CINT
:ROMFF5B    RTS

.include io.dasm16

; check for STOP key (probably ESC)
; return C=1 if STOP key pressed.
:DEF_STOP
:ROMF6ED    SET Z, 0
                SET C, 0
            IFN [RAM91], 0x7F
                RTS
            JSR ROMFFCC
          ; clear keyboard buffer
            SET [RAMC6], 0
           ; clear stop flag?
            SET [RAM91], 0
            SET C, 1
            SET Z, 1
            RTS

; increment real time clock
;:ROMF89B  RTS

; RESET routine  (SYS 64738)

:ROMFCE2       SET SP, STACKEND-1
               ; omitted cartridge code at FCE7 and FD02
; initialize display, keyboard and clock
:ROMFCF2      JSR IOINIT 
:ROMFCF5      JSR RAMTAS 
              JSR RESTOR 
              JSR CINT   
              IAQ 0 ;CLI
              JMP_IND ROMA000  ; START BASIC              

; restore I/O vectors
; this isn't necessary because the I/O vectors are assembled in
; but this part should be ported if anyone wants to do any 
; hardcore IO-level kernal porting.
:RESTOR
:ROMFD15    SET X, ROMFD30
            SET C, 0
            ; TODO: loop through all vectors
            SET [RAM0314], [ROMFD30]
            ;  Create a clock interrupt
            :add_clock
            set a, 0   ; activate clock interrupt
            set b, 1   ; frequency - every frame
            hwi [CLOCK]    
            set a, 2  ; set interrupt mesage
            set b, [clock_interrupt_message]
            hwi [CLOCK]  ; set the interrupt message
            ias MASTER_INT   ; set the interrupt handler

            RTS
:ROMFD30    DAT ROMEA31 ; IRQ
            DAT ROMFE66 ; BRK
            DAT ROMFE47 ; NMI

:MASTER_INT
:ROMFF48 ; In the original 6502 one,
         ; this routine pushed A, X, and Y before
     ; calling one of the two interrupts.
         ; CLOCKINT uses mostly A/X/Y.
     ; KEYINT uses mostly A/B/C.
     ; the BRK routine at FE6F isn't known
    IFE A, [clock_interrupt_message]
        JMP CLOCKINT
    IFE A, KEYINT
        JMP KEYINT
        ;ignore all others
    RFI 10

:CLOCKINT
    SET PUSH, EX
    SET PUSH, X
    SET PUSH, Y
    JMP_IND RAM0314
:clock_interrupt_message
        DAT ROMEA31


; make a custom vector
; i should probably port this
:VECTOR
:ROMFD1A    RTS

; initalise memory pointers
;
:RAMTAS
:ROMFD50
; the original 6502 kernal cleared pages 0, 2, and 3.
; but there's no RAM-ROM distinction so we don't have
; to do this for the DCPU port.
; also skipping the RAM test.
            SET [RAMB2], RAM033C   ; 828...cassette buffer?
            ;JSR ROMFE2D
            SET [RAM0281], BASICMEM
            SET [HIBASE], SCREENMEM
:ROMFD9A    RTS

; read/set top of memory
:MEMTOP
:ROMFF99
:ROMFE25   IFN C, 0 ; write if carry bit set
           SET X, [RAM0283]
           SET [RAM0283], X
           RTS

; read/set bottom of memory
:MEMBOT
:ROMFF9C
:ROMFE34   IFN C, 0 ; write if carry bit set
           SET X, [MEMSTR]
           SET [MEMSTR], X  
           RTS

; NMI entry stub
:ROMFE43   ; SEI
           JMP_IND RAM0318

; Standard NMI routine stub
:ROMFE47   ;???
           RFI 9001

; BRK routine

:ROMFE66     JSR RESTOR
:ROMFE69     JSR IOINIT
:ROMFE6C     JSR ROME518 ; initialize screen and keyboard
:ROMFE6F     JMP_IND ROMA002

; skipping a lot of file i/o-related kernal for now

:ROMFFB7    JMP ROMFE07
:OPEN
:ROMFFC0  JMP_IND RAM031A   ; (F34A) open a file
:CLOSE
:ROMFFC3  JMP_IND RAM031C   ; (F291) close a file
:CHKIN
:ROMFFC6  JMP_IND RAM031E   ; (F20E) set input device
:CHKOUT
:ROMFFC9  JMP_IND RAM0320   ; (F250) set output device
:CLRCHN
:ROMFFCC  JMP_IND RAM0322   ; (F333) restore I/O devices to default
:CHRIN
:ROMFFCF  JMP_IND ICHRIN   ; (F157) input char on current device
:CHROUT
:ROMFFD2  JMP_IND ICHROUT   ; (F1CA) output char on current device
:LOAD
:ROMFFD5  JMP DEF_LOAD      ; load RAM from device
:SAVE
:ROMFFD8  JMP DEF_SAVE      ; save RAM to device
:SETTIM
:ROMFFDB  JMP DEF_SETTIM      ; set real time clock
:RDTIM
:ROMFFDE  JMP ROMF6DD      ; read real time clock
:STOP
:ROMFFE1  JMP_IND ISTOP    ; (F6ED) check stop key
:GETIN
:ROMFFE4  JMP_IND IGETIN    ; (F13E) get a character
:CLALL
:ROMFFE7  JMP_IND ICLALL    ; (F32F) close all channels and files
:UDTIM
:ROMFFEA  JMP DEF_UDTIM   ; increment real time clock
:SCREEN
:ROMFFED  JMP DEF_SCREEN  ; read organisation of screen into XY
:PLOT
:ROMFFF0  JMP DEF_PLOT   ; read/set XY cursor position
:IOBASE
:ROMFFF3    JMP DEF_IOBASE  ; read base address of I/O devices
    
:ROMFFFA    DAT ROMFE43   ; NMI vector
:ROMFFFC  DAT ROMFCE2    ; RESET vector
:ROMFFFE  DAT ROMFF48     ; BRK vector
	    
:VARTABCRASH
    SET A, [VARTAB]
    SET B, [STREND]
    
:CRASH DAT 0x3000

:BASICMEM     
        .FILL 0, 10

